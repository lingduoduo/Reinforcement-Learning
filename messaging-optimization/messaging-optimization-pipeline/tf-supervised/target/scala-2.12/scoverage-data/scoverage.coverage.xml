<statements>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>shuffle</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>137</id><start>8039</start><end>8156</end><line>221</line><description>col.groupBy[Int](((x$9: T) =&gt; java.util.concurrent.ThreadLocalRandom.current().nextInt(numShards)))(coders.this.Coder.intCoder, evidence$7).flatMap[T](((x0$6: (Int, Iterable[T])) =&gt; x0$6 match {
  case (_1: Int, _2: Iterable[T])(Int, Iterable[T])(_, (values @ _)) =&gt; values
}))(evidence$7)</description><symbolName>com.spotify.scio.values.SCollection.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>146</id><start>477</start><end>517</end><line>18</line><description>InAppLabelJob.this.logger.info(scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition))</description><symbolName>org.slf4j.Logger.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>218</id><start>3848</start><end>3848</end><line>99</line><description>&quot;EmailLabelTable&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Class</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>table</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>227</id><start>116</start><end>116</end><line>7</line><description>new $anon()</description><symbolName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable.$anon.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>92</id><start>4987</start><end>5272</end><line>146</line><description>FeatureToTfRecord.this.getDataset[com.spotify.tf.InAppLabelTables.InAppLabelTable](args, sc, ((x$7: com.spotify.tf.InAppLabelTables.InAppLabelTable) =&gt; x$7.user_id), ((x$8: com.spotify.tf.InAppLabelTables.InAppLabelTable) =&gt; x$8.clicked))((ClassTag.apply[com.spotify.tf.InAppLabelTables.InAppLabelTable](classOf[com.spotify.tf.InAppLabelTables$$InAppLabelTable]): scala.reflect.ClassTag[com.spotify.tf.InAppLabelTables.InAppLabelTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.InAppLabelTables.InAppLabelTable]($m, {
    final class $typecreator3 extends TypeCreator {
      def &lt;init&gt;(): $typecreator3 = {
        $typecreator3.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.InAppLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.InAppLabelTables.InAppLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator3()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.InAppLabelTables.InAppLabelTable]), {
  val paramTypeclass$macro$239: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$240: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  val paramTypeclass$macro$241: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val parameters$macro$242: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]](9);
  parameters$macro$242.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;trigger&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$239), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Long](&quot;clicked&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$240), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$242.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[String]](&quot;campaign_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$241), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$238: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppLabelTables&quot;, &quot;InAppLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.InAppLabelTables.InAppLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$238, false, false, parameters$macro$242, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; Return): com.spotify.tf.InAppLabelTables.InAppLabelTable = new com.spotify.tf.InAppLabelTables.InAppLabelTable(makeParam.apply(parameters$macro$242.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(6)).asInstanceOf[String], makeParam.apply(parameters$macro$242.apply(7)).asInstanceOf[Long], makeParam.apply(parameters$macro$242.apply(8)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppLabelTables.InAppLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p5: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$242.apply(6)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p6: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$242.apply(7)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p7: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$242.apply(8)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p8: Option[String]) =&gt; new com.spotify.tf.InAppLabelTables.InAppLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppLabelTables.InAppLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$242.length, typeName$macro$238.full);
        new com.spotify.tf.InAppLabelTables.InAppLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[String], fieldValues.apply(7).asInstanceOf[Long], fieldValues.apply(8).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}).map[org.tensorflow.example.Example](((x0$3: (String, (com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))) =&gt; x0$3 match {
  case (_1: String, _2: (com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))(String, (com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))((user_id @ _), (_1: com.spotify.tf.InAppLabelTables.InAppLabelTable, _2: Option[com.spotify.tf.UserAggregateTables.UserAggTable])(com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable])((labelRow @ _), (userAggRow @ _))) =&gt; InAppFeatureConverter.toExample(InAppFeatureConverter.InAppFeatures.apply(labelRow, userAggRow))
}))(coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example])))</description><symbolName>com.spotify.scio.values.SCollection.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>101</id><start>5990</start><end>6031</end><line>167</line><description>args.optional(&quot;days-back&quot;).getOrElse[String](&quot;7&quot;)</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>200</id><start>1420</start><end>1430</end><line>40</line><description>sc.close()</description><symbolName>com.spotify.scio.ScioContext.close</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>173</id><start>644</start><end>644</end><line>21</line><description>scala.Predef.$conforms[com.spotify.tf.PushLabelTables.PushLabelTable]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>209</id><start>2042</start><end>2045</end><line>54</line><description>&quot;.&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>182</id><start>738</start><end>738</end><line>22</line><description>x$1._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>191</id><start>1254</start><end>1279</end><line>34</line><description>scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>83</id><start>4880</start><end>4937</end><line>141</line><description>EmailFeatureConverter.EmailFeatures.apply(labelRow, userAggRow)</description><symbolName>com.spotify.tf.EmailFeatureConverter.EmailFeatures.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>155</id><start>664</start><end>664</end><line>23</line><description>qual$2.waitUntilDone$default$1</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>164</id><start>435</start><end>449</end><line>15</line><description>args.apply(&quot;output&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>tableDescription</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>245</id><start>2465</start><end>2465</end><line>67</line><description>&quot;{description: Push Click Labelled Data for user protection models}&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>110</id><start>6268</start><end>6324</end><line>171</line><description>scala.Predef.augmentString(args.optional(&quot;over-sample-rate&quot;).getOrElse[String](&quot;1&quot;)).toFloat</description><symbolName>scala.collection.immutable.StringLike.toFloat</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>119</id><start>6787</start><end>6787</end><line>183</line><description>coders.this.Coder.tuple2Coder[String, T]({
  val inst$macro$293: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder.asInstanceOf[com.spotify.scio.coders.Coder[String]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[String]](inst$macro$293)
}, {
  val inst$macro$295: com.spotify.scio.coders.Coder[T] = evidence$6.asInstanceOf[com.spotify.scio.coders.Coder[T]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[T]](inst$macro$295)
})</description><symbolName>com.spotify.scio.coders.instances.TupleCoders.tuple2Coder</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>128</id><start>7060</start><end>7070</end><line>190</line><description>a.union(b)</description><symbolName>com.spotify.scio.values.SCollection.union</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>tableDescription</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>236</id><start>2304</start><end>2304</end><line>65</line><description>&quot;{description: Email Open Labelled Data for user protection models}&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>95</id><start>5362</start><end>5424</end><line>154</line><description>scala.Predef.augmentString(com.spotify.tf.ExperimentTables.ExperimentFeaturesTable.table).format(args.apply(&quot;experiment_table&quot;))</description><symbolName>scala.collection.immutable.StringLike.format</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ChannelFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ChannelFeatureConverter</fullClassName><method>exampleConverter</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>23</id><start>1081</start><end>1117</end><line>29</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](derive.this.`package`.toExampleConverter[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]({
  val channelfeaturesTypeclass$macro$23: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] = {
    val paramTypeclass$macro$25: com.spotify.tfexample.derive.FeatureBuilder[T] = evidence$1;
    val paramTypeclass$macro$41: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$26: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$28: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$31: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$34: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$35: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$38: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$39: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$39.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$28), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$28), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$28), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$27: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$27, false, false, parameters$macro$39, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$39.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$39.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$39.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$39.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$39.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$39.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$39.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$39.length, typeName$macro$27.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$26
    });
    val parameters$macro$42: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]](2);
    parameters$macro$42.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T], T](&quot;labelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[T]](paramTypeclass$macro$25), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$42.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T], Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$41), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$24: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ChannelFeatureConverter&quot;, &quot;ChannelFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$24, false, false, parameters$macro$42, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] =&gt; Return): com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T] = new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](makeParam.apply(parameters$macro$42.apply(0)).asInstanceOf[T], makeParam.apply(parameters$macro$42.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] = new mercator.Ops[F,T](makeParam.apply(parameters$macro$42.apply(0)).asInstanceOf[F[T]]).flatMap[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](((p0: T) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$42.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T] = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$42.length, typeName$macro$24.full);
          new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](fieldValues.apply(0).asInstanceOf[T], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  channelfeaturesTypeclass$macro$23
}))</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>104</id><start>6065</start><end>6097</end><line>168</line><description>scala.Predef.augmentString(args.apply(&quot;days-prior-useragg&quot;)).toInt</description><symbolName>scala.collection.immutable.StringLike.toInt</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>131</id><start>7371</start><end>7398</end><line>197</line><description>sampleRate.*(oversampleRate)</description><symbolName>scala.Float.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>122</id><start>6898</start><end>6898</end><line>185</line><description>coders.this.Coder.tuple2Coder[String, com.spotify.tf.UserAggregateTables.UserAggTable]({
  val inst$macro$362: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder.asInstanceOf[com.spotify.scio.coders.Coder[String]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[String]](inst$macro$362)
}, {
  val inst$macro$385: com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
  val paramTypeclass$macro$366: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$373: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$374: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$375: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$382: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$383: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$383.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$365: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$365, false, false, parameters$macro$383, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$383.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$383.length, typeName$macro$365.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}.asInstanceOf[com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable]](inst$macro$385)
})</description><symbolName>com.spotify.scio.coders.instances.TupleCoders.tuple2Coder</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>194</id><start>1350</start><end>1367</end><line>37</line><description>com.spotify.scio.bigquery.`package`.toBigQuerySCollection[com.spotify.tf.UserAggregateTables.UserAggTable](userAggLabelsRows)</description><symbolName>com.spotify.scio.bigquery.toBigQuerySCollection</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>176</id><start>679</start><end>679</end><line>23</line><description>qual$2.waitUntilDone$default$1</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>77</id><start>4561</start><end>4616</end><line>133</line><description>PushFeatureConverter.PushFeatures.apply(labelRow, userAggRow)</description><symbolName>com.spotify.tf.PushFeatureConverter.PushFeatures.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>86</id><start>4666</start><end>4950</end><line>138</line><description>FeatureToTfRecord.this.getDataset[com.spotify.tf.EmailLabelTables.EmailLabelTable](args, sc, ((x$5: com.spotify.tf.EmailLabelTables.EmailLabelTable) =&gt; x$5.user_id), ((x$6: com.spotify.tf.EmailLabelTables.EmailLabelTable) =&gt; x$6.opened))((ClassTag.apply[com.spotify.tf.EmailLabelTables.EmailLabelTable](classOf[com.spotify.tf.EmailLabelTables$$EmailLabelTable]): scala.reflect.ClassTag[com.spotify.tf.EmailLabelTables.EmailLabelTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.EmailLabelTables.EmailLabelTable]($m, {
    final class $typecreator2 extends TypeCreator {
      def &lt;init&gt;(): $typecreator2 = {
        $typecreator2.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.EmailLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.EmailLabelTables.EmailLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator2()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.EmailLabelTables.EmailLabelTable]), {
  val paramTypeclass$macro$219: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$220: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val paramTypeclass$macro$227: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$228: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$229: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]](15);
  parameters$macro$229.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;first_open&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$220), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[Long]](&quot;hrs_to_open&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$227), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;optout_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$219), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;opened&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$228), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_open&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$228), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$228), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_click&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$228), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;unsubscribed&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$228), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$229.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;campaign_type&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$220), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$218: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailLabelTables&quot;, &quot;EmailLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.EmailLabelTables.EmailLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$218, false, false, parameters$macro$229, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; Return): com.spotify.tf.EmailLabelTables.EmailLabelTable = new com.spotify.tf.EmailLabelTables.EmailLabelTable(makeParam.apply(parameters$macro$229.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(6)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$229.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$229.apply(8)).asInstanceOf[String], makeParam.apply(parameters$macro$229.apply(9)).asInstanceOf[Long], makeParam.apply(parameters$macro$229.apply(10)).asInstanceOf[Long], makeParam.apply(parameters$macro$229.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$229.apply(12)).asInstanceOf[Long], makeParam.apply(parameters$macro$229.apply(13)).asInstanceOf[Long], makeParam.apply(parameters$macro$229.apply(14)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailLabelTables.EmailLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p5: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$229.apply(6)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p6: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$229.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$229.apply(8)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p8: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$229.apply(9)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p9: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$229.apply(10)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p10: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$229.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$229.apply(12)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p12: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$229.apply(13)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p13: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$229.apply(14)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p14: Option[String]) =&gt; new com.spotify.tf.EmailLabelTables.EmailLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailLabelTables.EmailLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$229.length, typeName$macro$218.full);
        new com.spotify.tf.EmailLabelTables.EmailLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Option[String]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[String], fieldValues.apply(9).asInstanceOf[Long], fieldValues.apply(10).asInstanceOf[Long], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Long], fieldValues.apply(13).asInstanceOf[Long], fieldValues.apply(14).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}).map[org.tensorflow.example.Example](((x0$2: (String, (com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))) =&gt; x0$2 match {
  case (_1: String, _2: (com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))(String, (com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))((user_id @ _), (_1: com.spotify.tf.EmailLabelTables.EmailLabelTable, _2: Option[com.spotify.tf.UserAggregateTables.UserAggTable])(com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable])((labelRow @ _), (userAggRow @ _))) =&gt; EmailFeatureConverter.toExample(EmailFeatureConverter.EmailFeatures.apply(labelRow, userAggRow))
}))(coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example])))</description><symbolName>com.spotify.scio.values.SCollection.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>158</id><start>653</start><end>679</end><line>23</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>185</id><start>857</start><end>871</end><line>25</line><description>args.apply(&quot;output&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>167</id><start>495</start><end>535</end><line>18</line><description>PushLabelJob.this.logger.info(scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition))</description><symbolName>org.slf4j.Logger.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>50</id><start>3641</start><end>3700</end><line>108</line><description>scala.Predef.augmentString(args.optional(&quot;num-shuffle-shards&quot;).getOrElse[String](&quot;7919&quot;)).toInt</description><symbolName>scala.collection.immutable.StringLike.toInt</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>59</id><start>3972</start><end>3972</end><line>116</line><description>qual$1.saveAsTfExampleFile$default$4</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>68</id><start>4090</start><end>4090</end><line>119</line><description>qual$3.waitUntilDone$default$1</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>InAppFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppFeatureConverter</fullClassName><method>toExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>32</id><start>2202</start><end>2241</end><line>62</line><description>InAppFeatureConverter.this.inAppExampleConverter.toExample(record)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ExperimentFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentFeatureConverter</fullClassName><method>fromExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>41</id><start>3226</start><end>3278</end><line>96</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures](derive.this.`package`.toExampleConverter[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]({
  val experimentfeaturesTypeclass$macro$171: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] = {
    val paramTypeclass$macro$186: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = {
      val experimentfeaturestableTypeclass$macro$173: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = {
        val paramTypeclass$macro$177: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$180: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$183: com.spotify.tfexample.derive.FeatureBuilder[Option[Double]] = derive.this.`package`.optionFb[Double](derive.this.`package`.singletonFeatureBuilder[Double](derive.this.`package`.doubleTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$184: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](55);
        parameters$macro$184.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$177), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$183), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$184.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;label&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$180), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$174: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentTables&quot;, &quot;ExperimentFeaturesTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$174, false, false, parameters$macro$184, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag())((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; Return): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(makeParam.apply(parameters$macro$184.apply(0)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(1)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(3)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(6)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(10)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(11)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$184.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(21)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(22)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(23)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(26)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(29)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(33)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(34)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(35)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(38)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(41)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(45)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(46)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(47)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(50)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$184.apply(53)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$184.apply(54)).asInstanceOf[Option[Long]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(0)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p0: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(1)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p1: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(3)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p3: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(6)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p6: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(10)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p10: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(11)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p11: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$184.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(21)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p21: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(22)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p22: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(23)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p23: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(26)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p26: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(29)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p29: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(33)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p33: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(34)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p34: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(35)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p35: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(38)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p38: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(41)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p41: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(45)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p45: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(46)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p46: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(47)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p47: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(50)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p50: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$184.apply(53)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p53: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$184.apply(54)).asInstanceOf[F[Option[Long]]]).map[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p54: Option[Long]) =&gt; new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$184.length, typeName$macro$174.full);
              new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(fieldValues.apply(0).asInstanceOf[Option[String]], fieldValues.apply(1).asInstanceOf[Option[String]], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[Option[String]], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Option[Long]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Option[Long]], fieldValues.apply(11).asInstanceOf[Option[Long]], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Double]], fieldValues.apply(22).asInstanceOf[Option[Double]], fieldValues.apply(23).asInstanceOf[Option[Double]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Double]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Double]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Double]], fieldValues.apply(34).asInstanceOf[Option[Double]], fieldValues.apply(35).asInstanceOf[Option[Double]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Double]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Double]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Double]], fieldValues.apply(46).asInstanceOf[Option[Double]], fieldValues.apply(47).asInstanceOf[Option[Double]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Double]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Double]], fieldValues.apply(54).asInstanceOf[Option[Long]])
            }
          };
          new $anon()
        })
      };
      experimentfeaturestableTypeclass$macro$173
    };
    val parameters$macro$187: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]](1);
    parameters$macro$187.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](&quot;featureTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](paramTypeclass$macro$186), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$172: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentFeatureConverter&quot;, &quot;ExperimentFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$172, false, false, parameters$macro$187, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] =&gt; Return): com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures = new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(makeParam.apply(parameters$macro$187.apply(0)).asInstanceOf[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] = new mercator.Ops[F,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](makeParam.apply(parameters$macro$187.apply(0)).asInstanceOf[F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]]).map[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures](((p0: com.spotify.tf.ExperimentTables.ExperimentFeaturesTable) =&gt; new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(p0)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$187.length, typeName$macro$172.full);
          new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable])
        }
      };
      new $anon()
    })
  };
  experimentfeaturesTypeclass$macro$171
})).fromExample(ex)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.fromExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>113</id><start>6514</start><end>6538</end><line>178</line><description>index.+(daysPriorUseragg)</description><symbolName>scala.Int.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>140</id><start>315</start><end>315</end><line>12</line><description>x$1._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>149</id><start>610</start><end>610</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$2</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>53</id><start>3871</start><end>3871</end><line>113</line><description>x$2._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>62</id><start>4054</start><end>4072</end><line>117</line><description>scala.StringContext.apply(&quot;&quot;, &quot;&quot;).s(evalDataOutput)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>134</id><start>7527</start><end>7546</end><line>203</line><description>chance.&lt;(sampleProb)</description><symbolName>scala.Float.&lt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>PushFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.PushFeatureConverter</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>35</id><start>2591</start><end>2621</end><line>74</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.PushFeatureConverter.PushFeatures](derive.this.`package`.toExampleConverter[com.spotify.tf.PushFeatureConverter.PushFeatures]({
  val pushfeaturesTypeclass$macro$122: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushFeatureConverter.PushFeatures] = {
    val paramTypeclass$macro$138: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushLabelTables.PushLabelTable] = {
      val pushlabeltableTypeclass$macro$124: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushLabelTables.PushLabelTable] = {
        val paramTypeclass$macro$126: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$127: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        val paramTypeclass$macro$128: com.spotify.tfexample.derive.FeatureBuilder[Float] = derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping);
        val paramTypeclass$macro$131: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        val paramTypeclass$macro$134: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$135: com.spotify.tfexample.derive.FeatureBuilder[Long] = derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping);
        ();
        val parameters$macro$136: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]](13);
        parameters$macro$136.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;The date of push conversion process&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Channel reached - should always be push&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;{ policy: { semanticType: userId }, description: \'Id of user reached with a push\' }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Identifier of the push sent&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;time_send&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Int](&quot;os_level_unsub&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$127), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Float](&quot;optout_diff&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Float]](paramTypeclass$macro$128), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;time_click&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$131), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[Long]](&quot;hrs_to_click&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$134), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;optout_type&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$135), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;campaign_type&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$131), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$125: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushLabelTables&quot;, &quot;PushLabelTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.PushLabelTables.PushLabelTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$125, false, false, parameters$macro$136, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: Push Click Labelled Data for user protection models}&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; Return): com.spotify.tf.PushLabelTables.PushLabelTable = new com.spotify.tf.PushLabelTables.PushLabelTable(makeParam.apply(parameters$macro$136.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$136.apply(7)).asInstanceOf[Float], makeParam.apply(parameters$macro$136.apply(8)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$136.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$136.apply(10)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$136.apply(12)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushLabelTables.PushLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p5: String) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$136.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p6: Int) =&gt; new mercator.Ops[F,Float](makeParam.apply(parameters$macro$136.apply(7)).asInstanceOf[F[Float]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p7: Float) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$136.apply(8)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p8: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$136.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(10)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p10: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$136.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$136.apply(12)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.PushLabelTables.PushLabelTable](((p12: Option[String]) =&gt; new com.spotify.tf.PushLabelTables.PushLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushLabelTables.PushLabelTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$136.length, typeName$macro$125.full);
              new com.spotify.tf.PushLabelTables.PushLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Float], fieldValues.apply(8).asInstanceOf[Option[String]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[String], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      pushlabeltableTypeclass$macro$124
    };
    val paramTypeclass$macro$150: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$139: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$141: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$142: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$143: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$144: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$147: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$148: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$148.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$141), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$141), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$141), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$140: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$140, false, false, parameters$macro$148, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$148.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$148.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$148.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$148.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$148.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$148.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$148.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$148.length, typeName$macro$140.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$139
    });
    val parameters$macro$151: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures]](2);
    parameters$macro$151.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushFeatureConverter.PushFeatures, com.spotify.tf.PushLabelTables.PushLabelTable](&quot;pushLabelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushLabelTables.PushLabelTable]](paramTypeclass$macro$138), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$151.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushFeatureConverter.PushFeatures, Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$150), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$123: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushFeatureConverter&quot;, &quot;PushFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.PushFeatureConverter.PushFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$123, false, false, parameters$macro$151, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures] =&gt; Return): com.spotify.tf.PushFeatureConverter.PushFeatures = new com.spotify.tf.PushFeatureConverter.PushFeatures(makeParam.apply(parameters$macro$151.apply(0)).asInstanceOf[com.spotify.tf.PushLabelTables.PushLabelTable], makeParam.apply(parameters$macro$151.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushFeatureConverter.PushFeatures] = new mercator.Ops[F,com.spotify.tf.PushLabelTables.PushLabelTable](makeParam.apply(parameters$macro$151.apply(0)).asInstanceOf[F[com.spotify.tf.PushLabelTables.PushLabelTable]]).flatMap[com.spotify.tf.PushFeatureConverter.PushFeatures](((p0: com.spotify.tf.PushLabelTables.PushLabelTable) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$151.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.PushFeatureConverter.PushFeatures](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.PushFeatureConverter.PushFeatures(p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushFeatureConverter.PushFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$151.length, typeName$macro$123.full);
          new com.spotify.tf.PushFeatureConverter.PushFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.PushLabelTables.PushLabelTable], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  pushfeaturesTypeclass$macro$122
}))</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>8</id><start>510</start><end>537</end><line>18</line><description>scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>44</id><start>3427</start><end>3442</end><line>104</line><description>args.apply(&quot;channel&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>17</id><start>674</start><end>684</end><line>23</line><description>sc.close()</description><symbolName>com.spotify.scio.ScioContext.close</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>EmailFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailFeatureConverter</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>26</id><start>1649</start><end>1649</end><line>45</line><description>derive.this.`package`.toExampleConverter[com.spotify.tf.EmailFeatureConverter.EmailFeatures]({
  val emailfeaturesTypeclass$macro$65: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailFeatureConverter.EmailFeatures] = {
    val paramTypeclass$macro$79: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailLabelTables.EmailLabelTable] = {
      val emaillabeltableTypeclass$macro$67: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailLabelTables.EmailLabelTable] = {
        val paramTypeclass$macro$69: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$72: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        val paramTypeclass$macro$75: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$76: com.spotify.tfexample.derive.FeatureBuilder[Long] = derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$77: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]](15);
        parameters$macro$77.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;The date of email conversion process&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Channel reached - should always be email&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;{ policy: { semanticType: userId }, description: \'Id of user reached with an email\' }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Identifier of the email sent&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;first_open&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$72), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[Long]](&quot;hrs_to_open&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$75), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;optout_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;opened&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_open&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_click&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;unsubscribed&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;campaign_type&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$72), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$68: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailLabelTables&quot;, &quot;EmailLabelTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.EmailLabelTables.EmailLabelTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$68, false, false, parameters$macro$77, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: Email Open Labelled Data for user protection models}&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; Return): com.spotify.tf.EmailLabelTables.EmailLabelTable = new com.spotify.tf.EmailLabelTables.EmailLabelTable(makeParam.apply(parameters$macro$77.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(6)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$77.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$77.apply(8)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(9)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(10)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(12)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(13)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(14)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailLabelTables.EmailLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p5: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$77.apply(6)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p6: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$77.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(8)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p8: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(9)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p9: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(10)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p10: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(12)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p12: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(13)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p13: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$77.apply(14)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p14: Option[String]) =&gt; new com.spotify.tf.EmailLabelTables.EmailLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailLabelTables.EmailLabelTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$77.length, typeName$macro$68.full);
              new com.spotify.tf.EmailLabelTables.EmailLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Option[String]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[String], fieldValues.apply(9).asInstanceOf[Long], fieldValues.apply(10).asInstanceOf[Long], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Long], fieldValues.apply(13).asInstanceOf[Long], fieldValues.apply(14).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      emaillabeltableTypeclass$macro$67
    };
    val paramTypeclass$macro$91: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$80: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$82: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$83: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$84: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$85: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$88: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$89: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$89.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$82), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$82), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$82), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$81: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$81, false, false, parameters$macro$89, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$89.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$89.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$89.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$89.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$89.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$89.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$89.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$89.length, typeName$macro$81.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$80
    });
    val parameters$macro$92: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures]](2);
    parameters$macro$92.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailFeatureConverter.EmailFeatures, com.spotify.tf.EmailLabelTables.EmailLabelTable](&quot;emailLabelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailLabelTables.EmailLabelTable]](paramTypeclass$macro$79), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$92.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailFeatureConverter.EmailFeatures, Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$91), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$66: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailFeatureConverter&quot;, &quot;EmailFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.EmailFeatureConverter.EmailFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$66, false, false, parameters$macro$92, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures] =&gt; Return): com.spotify.tf.EmailFeatureConverter.EmailFeatures = new com.spotify.tf.EmailFeatureConverter.EmailFeatures(makeParam.apply(parameters$macro$92.apply(0)).asInstanceOf[com.spotify.tf.EmailLabelTables.EmailLabelTable], makeParam.apply(parameters$macro$92.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailFeatureConverter.EmailFeatures] = new mercator.Ops[F,com.spotify.tf.EmailLabelTables.EmailLabelTable](makeParam.apply(parameters$macro$92.apply(0)).asInstanceOf[F[com.spotify.tf.EmailLabelTables.EmailLabelTable]]).flatMap[com.spotify.tf.EmailFeatureConverter.EmailFeatures](((p0: com.spotify.tf.EmailLabelTables.EmailLabelTable) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$92.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.EmailFeatureConverter.EmailFeatures](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.EmailFeatureConverter.EmailFeatures(p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailFeatureConverter.EmailFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$92.length, typeName$macro$66.full);
          new com.spotify.tf.EmailFeatureConverter.EmailFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.EmailLabelTables.EmailLabelTable], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  emailfeaturesTypeclass$macro$65
})</description><symbolName>com.spotify.tfexample.derive.Implicits.toExampleConverter</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>125</id><start>6954</start><end>6991</end><line>187</line><description>values.this.SCollection.makePairSCollectionFunctions[String, T](labelsRows).leftOuterJoin[com.spotify.tf.UserAggregateTables.UserAggTable](userAggRows)({
  val paramTypeclass$macro$388: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$389: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$390: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$391: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$392: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$393: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$393.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$388), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$388), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$388), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$393.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$387: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$387, false, false, parameters$macro$393, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$393.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$393.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$393.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$393.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$393.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$393.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$393.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$393.length, typeName$macro$387.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}, coders.this.Coder.stringCoder, evidence$6)</description><symbolName>com.spotify.scio.values.PairSCollectionFunctions.leftOuterJoin</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>89</id><start>5202</start><end>5259</end><line>149</line><description>InAppFeatureConverter.InAppFeatures.apply(labelRow, userAggRow)</description><symbolName>com.spotify.tf.InAppFeatureConverter.InAppFeatures.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>80</id><start>4348</start><end>4629</end><line>130</line><description>FeatureToTfRecord.this.getDataset[com.spotify.tf.PushLabelTables.PushLabelTable](args, sc, ((x$3: com.spotify.tf.PushLabelTables.PushLabelTable) =&gt; x$3.user_id), ((x$4: com.spotify.tf.PushLabelTables.PushLabelTable) =&gt; x$4.clicked))((ClassTag.apply[com.spotify.tf.PushLabelTables.PushLabelTable](classOf[com.spotify.tf.PushLabelTables$$PushLabelTable]): scala.reflect.ClassTag[com.spotify.tf.PushLabelTables.PushLabelTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.PushLabelTables.PushLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.PushLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.PushLabelTables.PushLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.PushLabelTables.PushLabelTable]), {
  val paramTypeclass$macro$197: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$198: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  val paramTypeclass$macro$199: com.spotify.scio.coders.Coder[Float] = coders.this.Coder.floatCoder;
  val paramTypeclass$macro$200: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val paramTypeclass$macro$207: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$208: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  ();
  val parameters$macro$209: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]](13);
  parameters$macro$209.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;time_send&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Int](&quot;os_level_unsub&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$198), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Float](&quot;optout_diff&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Float]](paramTypeclass$macro$199), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;time_click&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$200), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[Long]](&quot;hrs_to_click&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$207), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;optout_type&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$197), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$208), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$209.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;campaign_type&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$200), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$196: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushLabelTables&quot;, &quot;PushLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.PushLabelTables.PushLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$196, false, false, parameters$macro$209, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; Return): com.spotify.tf.PushLabelTables.PushLabelTable = new com.spotify.tf.PushLabelTables.PushLabelTable(makeParam.apply(parameters$macro$209.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$209.apply(7)).asInstanceOf[Float], makeParam.apply(parameters$macro$209.apply(8)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$209.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$209.apply(10)).asInstanceOf[String], makeParam.apply(parameters$macro$209.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$209.apply(12)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushLabelTables.PushLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p5: String) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$209.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p6: Int) =&gt; new mercator.Ops[F,Float](makeParam.apply(parameters$macro$209.apply(7)).asInstanceOf[F[Float]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p7: Float) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$209.apply(8)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p8: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$209.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$209.apply(10)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p10: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$209.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$209.apply(12)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.PushLabelTables.PushLabelTable](((p12: Option[String]) =&gt; new com.spotify.tf.PushLabelTables.PushLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushLabelTables.PushLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$209.length, typeName$macro$196.full);
        new com.spotify.tf.PushLabelTables.PushLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Float], fieldValues.apply(8).asInstanceOf[Option[String]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[String], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}).map[org.tensorflow.example.Example](((x0$1: (String, (com.spotify.tf.PushLabelTables.PushLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))) =&gt; x0$1 match {
  case (_1: String, _2: (com.spotify.tf.PushLabelTables.PushLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))(String, (com.spotify.tf.PushLabelTables.PushLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))((user_id @ _), (_1: com.spotify.tf.PushLabelTables.PushLabelTable, _2: Option[com.spotify.tf.UserAggregateTables.UserAggTable])(com.spotify.tf.PushLabelTables.PushLabelTable, Option[com.spotify.tf.UserAggregateTables.UserAggTable])((labelRow @ _), (userAggRow @ _))) =&gt; PushFeatureConverter.toExample(PushFeatureConverter.PushFeatures.apply(labelRow, userAggRow))
}))(coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example])))</description><symbolName>com.spotify.scio.values.SCollection.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>116</id><start>6631</start><end>6681</end><line>180</line><description>scala.StringContext.apply(&quot;user-aggregations_&quot;, &quot;_days_back&quot;).s(index_days_prior)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>71</id><start>4079</start><end>4105</end><line>119</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>98</id><start>5503</start><end>5624</end><line>157</line><description>ExperimentFeatureConverter.exampleConverter.toExample(ExperimentFeatureConverter.ExperimentFeatures.apply(record))</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>107</id><start>6188</start><end>6234</end><line>170</line><description>args.optional(&quot;sample-rate&quot;).getOrElse[String](&quot;0.01&quot;)</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>11</id><start>608</start><end>623</end><line>20</line><description>com.spotify.scio.bigquery.`package`.toBigQuerySCollection[com.spotify.tf.EmailLabelTables.EmailLabelTable](emailLabelsRows)</description><symbolName>com.spotify.scio.bigquery.toBigQuerySCollection</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>74</id><start>4285</start><end>4292</end><line>125</line><description>&quot;INAPP&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>56</id><start>3992</start><end>4014</end><line>116</line><description>scala.StringContext.apply(&quot;&quot;, &quot;&quot;).s(trainingDataOutput)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>EmailFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailFeatureConverter</fullClassName><method>fromExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>29</id><start>1821</start><end>1858</end><line>51</line><description>EmailFeatureConverter.this.emailExampleConverter.fromExample(ex)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.fromExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ExperimentFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentFeatureConverter</fullClassName><method>exampleConverter</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>38</id><start>3040</start><end>3040</end><line>89</line><description>derive.this.`package`.toExampleConverter[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]({
  val experimentfeaturesTypeclass$macro$153: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] = {
    val paramTypeclass$macro$168: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = {
      val experimentfeaturestableTypeclass$macro$155: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = {
        val paramTypeclass$macro$159: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$162: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$165: com.spotify.tfexample.derive.FeatureBuilder[Option[Double]] = derive.this.`package`.optionFb[Double](derive.this.`package`.singletonFeatureBuilder[Double](derive.this.`package`.doubleTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$166: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](55);
        parameters$macro$166.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;label&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$156: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentTables&quot;, &quot;ExperimentFeaturesTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$156, false, false, parameters$macro$166, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag())((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; Return): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(makeParam.apply(parameters$macro$166.apply(0)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(1)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(3)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(6)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(10)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(11)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(21)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(22)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(23)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(26)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(29)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(33)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(34)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(35)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(38)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(41)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(45)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(46)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(47)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(50)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(53)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(54)).asInstanceOf[Option[Long]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(0)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p0: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(1)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p1: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(3)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p3: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(6)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p6: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(10)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p10: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(11)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p11: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(21)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p21: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(22)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p22: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(23)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p23: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(26)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p26: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(29)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p29: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(33)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p33: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(34)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p34: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(35)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p35: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(38)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p38: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(41)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p41: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(45)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p45: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(46)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p46: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(47)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p47: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(50)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p50: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(53)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p53: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(54)).asInstanceOf[F[Option[Long]]]).map[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p54: Option[Long]) =&gt; new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$166.length, typeName$macro$156.full);
              new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(fieldValues.apply(0).asInstanceOf[Option[String]], fieldValues.apply(1).asInstanceOf[Option[String]], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[Option[String]], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Option[Long]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Option[Long]], fieldValues.apply(11).asInstanceOf[Option[Long]], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Double]], fieldValues.apply(22).asInstanceOf[Option[Double]], fieldValues.apply(23).asInstanceOf[Option[Double]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Double]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Double]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Double]], fieldValues.apply(34).asInstanceOf[Option[Double]], fieldValues.apply(35).asInstanceOf[Option[Double]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Double]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Double]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Double]], fieldValues.apply(46).asInstanceOf[Option[Double]], fieldValues.apply(47).asInstanceOf[Option[Double]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Double]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Double]], fieldValues.apply(54).asInstanceOf[Option[Long]])
            }
          };
          new $anon()
        })
      };
      experimentfeaturestableTypeclass$macro$155
    };
    val parameters$macro$169: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]](1);
    parameters$macro$169.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](&quot;featureTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](paramTypeclass$macro$168), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$154: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentFeatureConverter&quot;, &quot;ExperimentFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$154, false, false, parameters$macro$169, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] =&gt; Return): com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures = new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(makeParam.apply(parameters$macro$169.apply(0)).asInstanceOf[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] = new mercator.Ops[F,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](makeParam.apply(parameters$macro$169.apply(0)).asInstanceOf[F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]]).map[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures](((p0: com.spotify.tf.ExperimentTables.ExperimentFeaturesTable) =&gt; new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(p0)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$169.length, typeName$macro$154.full);
          new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable])
        }
      };
      new $anon()
    })
  };
  experimentfeaturesTypeclass$macro$153
})</description><symbolName>com.spotify.tfexample.derive.Implicits.toExampleConverter</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>47</id><start>3565</start><end>3611</end><line>107</line><description>args.optional(&quot;split-weight&quot;).getOrElse[String](&quot;0.8&quot;)</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>244</id><start>2429</start><end>2429</end><line>66</line><description>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString(this.schema, &quot;PushLabelTable&quot;, indent)</description><symbolName>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Class</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>table</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>226</id><start>116</start><end>116</end><line>7</line><description>&quot;%s&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>20</id><start>674</start><end>700</end><line>23</line><description>qual$2.waitUntilDone(x$6, x$7)</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>2</id><start>238</start><end>276</end><line>9</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>235</id><start>2268</start><end>2268</end><line>64</line><description>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString(this.schema, &quot;InAppLabelTable&quot;, indent)</description><symbolName>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>65</id><start>4034</start><end>4034</end><line>117</line><description>qual$2.saveAsTfExampleFile$default$4</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>5</id><start>397</start><end>409</end><line>14</line><description>args.apply(&quot;date&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>184</id><start>799</start><end>811</end><line>24</line><description>args.apply(&quot;date&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>193</id><start>1310</start><end>1345</end><line>36</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.UserAggregateTables.UserAggTable](sql)((ClassTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable](classOf[com.spotify.tf.UserAggregateTables$$UserAggTable]): scala.reflect.ClassTag[com.spotify.tf.UserAggregateTables.UserAggTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(classOf[com.spotify.tf.UserAggregatesJobBase].getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.UserAggregateTables&quot;)), $m.staticClass(&quot;com.spotify.tf.UserAggregateTables.UserAggTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.UserAggregateTables.UserAggTable]), {
  val paramTypeclass$macro$443: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$444: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$445: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$446: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$453: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$454: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$454.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$443), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$443), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$443), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$445), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$445), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$446), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$446), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$446), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$446), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$445), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$445), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$444), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$453), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$445), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$454.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$445), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$442: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$442, false, false, parameters$macro$454, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$454.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$454.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$454.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$454.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$454.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$454.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$454.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$454.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$454.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$454.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$454.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$454.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$454.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$454.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$454.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$454.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$454.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$454.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$454.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$454.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$454.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$454.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$454.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$454.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$454.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$454.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$454.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$454.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$454.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$454.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$454.length, typeName$macro$442.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQueryScioContext.typedBigQuery</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>175</id><start>668</start><end>678</end><line>23</line><description>sc.close()</description><symbolName>com.spotify.scio.ScioContext.close</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>211</id><start>2004</start><end>2061</end><line>54</line><description>BQLocation.apply(0).+(&quot;:&quot;).+(BQLocation.apply(1)).+(&quot;.&quot;).+(BQLocation.apply(2))</description><symbolName>java.lang.String.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>166</id><start>507</start><end>534</end><line>18</line><description>scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggregateTables</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables</fullClassName><method>userAggregatesQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>247</id><start>222</start><end>6355</end><line>122</line><description>scala.Predef.augmentString(scala.StringContext.apply(&quot;\n       |#standardSQL\n       |SELECT\n       |  a.*,\n       |  b.reporting_age_bucket,\n       |  b.gender\n       |FROM (\n       |  SELECT\n       |    user_id,\n       |    country_code,\n       |    dsr,\n       |    dsr_bucket,\n       |    first_platform,\n       |    primary_platform,\n       |    activated AS has_streamed_ever,\n       |    registered_today,\n       |    days_since_last_mau,\n       |    days_since_last_dau,\n       |    #Activity Metrics\n       |    (CASE\n       |        WHEN activity.today.is_dau THEN 1\n       |        ELSE 0 END) AS is_dau,\n       |    (CASE\n       |        WHEN activity.today.is_mau THEN 1\n       |        ELSE 0 END) AS is_mau,\n       |    activity.today.ms_played AS ms_played_day,\n       |    activity.today.num_streams AS num_streams_day,\n       |    activity.last_30d.ms_played AS ms_played_month,\n       |    activity.last_30d.num_streams AS num_streams_month,\n       |    #Product (account type) Metrics\n       |    product.today.product_type,\n       |    product.today.product_category,\n       |    #Message History Metrics (up to 28 days ago)\n       |    message_history_agg.today.num_email AS num_email_yesterday,\n       |    message_history_agg.today.num_email_open AS num_email_open_yesterday,\n       |    message_history_agg.today.num_email_click AS num_email_click_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_email_open,\n       |        message_history_agg.today.num_email),\n       |      0) AS email_open_rate_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_email_click,\n       |        message_history_agg.today.num_email),\n       |      0) AS email_click_deliver_rate_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_email_click,\n       |        message_history_agg.today.num_email_open),\n       |      0) AS email_click_open_rate_yesterday,\n       |    message_history_agg.today.num_push AS num_push_yesterday,\n       |    message_history_agg.today.num_push_click AS num_push_click_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_push_click,\n       |        message_history_agg.today.num_push),\n       |      0) AS push_click_rate_yesterday,\n       |    message_history_agg.today.num_in_app_view AS num_in_app_yesterday,\n       |    message_history_agg.today.num_in_app_click AS num_in_app_click_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_in_app_click,\n       |        message_history_agg.today.num_in_app_view),\n       |      0) AS in_app_click_rate_yesterday,\n       |    message_history_agg.last_week.num_email AS num_email_week,\n       |    message_history_agg.last_week.num_email_open AS num_email_open_week,\n       |    message_history_agg.last_week.num_email_click AS num_email_click_week,\n       |    safe_divide(message_history_agg.last_week.num_email_open,\n       |      message_history_agg.last_week.num_email) AS email_open_rate_week,\n       |    safe_divide(message_history_agg.last_week.num_email_click,\n       |      message_history_agg.last_week.num_email) AS email_click_deliver_rate_week,\n       |    safe_divide(message_history_agg.last_week.num_email_click,\n       |      message_history_agg.last_week.num_email_open) AS email_click_open_rate_week,\n       |    message_history_agg.last_week.num_push num_push_week,\n       |    message_history_agg.last_week.num_push_click AS num_push_click_week,\n       |    safe_divide(message_history_agg.last_week.num_push_click,\n       |      message_history_agg.last_week.num_push) AS push_click_rate_week,\n       |    message_history_agg.last_week.num_in_app_view AS num_in_app_week,\n       |    message_history_agg.last_week.num_in_app_click AS num_in_app_click_week,\n       |    safe_divide(message_history_agg.last_week.num_in_app_click,\n       |      message_history_agg.last_week.num_in_app_view) AS in_app_click_rate_week,\n       |    message_history_agg.last_month.num_email AS num_email_month,\n       |    message_history_agg.last_month.num_email_open AS num_email_open_month,\n       |    message_history_agg.last_month.num_email_click AS num_email_click_month,\n       |    safe_divide(message_history_agg.last_month.num_email_open,\n       |      message_history_agg.last_month.num_email) AS email_open_rate_month,\n       |    safe_divide(message_history_agg.last_month.num_email_click,\n       |      message_history_agg.last_month.num_email) AS email_click_deliver_rate_month,\n       |    safe_divide(message_history_agg.last_month.num_email_click,\n       |      message_history_agg.last_month.num_email_open) AS email_click_open_rate_month,\n       |    message_history_agg.last_month.num_push AS num_push_month,\n       |    message_history_agg.last_month.num_push_click AS num_push_click_month,\n       |    safe_divide(message_history_agg.last_month.num_push_click,\n       |      message_history_agg.last_month.num_push) AS push_click_rate_month,\n       |    message_history_agg.last_month.num_in_app_view AS num_in_app_month,\n       |    message_history_agg.last_month.num_in_app_click AS num_in_app_click_month,\n       |    safe_divide(message_history_agg.last_month.num_in_app_click,\n       |      message_history_agg.last_month.num_in_app_view) AS in_app_click_rate_month\n       |  FROM\n       |    `users-protection.ccd.user_communication_snapshot_&quot;, &quot;`) a\n       |LEFT JOIN\n       |    (\n       |   SELECT\n       |     user_id,\n       |     reporting_age_bucket,\n       |     gender\n       |    FROM `business-critical-data.user_snapshot_4.user_snapshot_4_&quot;, &quot;`) b\n       |ON\n       |  a.user_id = to_hex(b.user_id)\n       |RIGHT JOIN\n       |  # NOTE: label data is allowed to have duplicated user_ids (the same user treats different\n       |    #       messages differently), while we only need unique users to pull their user agg data\n       |  (\n       |  SELECT\n       |    DISTINCT(user_id)\n       |  FROM\n       |    `&quot;, &quot;`) c\n       |ON\n       |  a.user_id = c.user_id\n       |  # NOTE: for some reason we might have null user_id here which need to be filtered out\n       |WHERE\n       |  a.user_id IS NOT NULL\n     &quot;).s(partition, partition, labelTableToJoin)).stripMargin</description><symbolName>scala.collection.immutable.StringLike.stripMargin</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>14</id><start>631</start><end>631</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$4</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>tableDescription</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>220</id><start>3884</start><end>3884</end><line>100</line><description>&quot;{description: Email Open Labelled Data for user protection models}&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTables</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables</fullClassName><method>inAppLabelQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>229</id><start>292</start><end>2259</end><line>61</line><description>scala.Predef.augmentString(scala.StringContext.apply(&quot;\n       |#standardSQL\n       |  # Functions to Make sure that the open happened in the correct time period\n       |CREATE TEMP FUNCTION\n       |  checkClickTime(clickTime ANY TYPE) AS (clickTime &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR clickTime IS NULL );\n       |SELECT\n       |  label.*,\n       |  meta.campaign_type\n       |FROM (\n       |  SELECT\n       |    \&quot;&quot;, &quot;\&quot; AS date,\n       |    channel,\n       |    user_id,\n       |    message_id,\n       |    in_app.campaign_id,\n       |    STRING(in_app.time_delivered) AS time_delivered,\n       |    # Safety for backfills\n       |    # Keeps definition of convert within 7 days of delivery\n       |    in_app.trigger as trigger,\n       |    (CASE\n       |        WHEN checkClickTime(in_app.time_click) THEN in_app.clicked\n       |        ELSE 0 END) AS clicked\n       |  FROM\n       |    `users-protection.ccd.communications_health_&quot;, &quot;`\n       |  WHERE\n       |    channel = \&quot;in_app\&quot;\n       |    AND lower(in_app.trigger) not like \'%upsell%\'\n       |    AND in_app.time_delivered &lt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*6 HOUR)\n       |    AND in_app.time_delivered &gt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*7 HOUR)\n       |    AND in_app.campaign_id in\n       |    (SELECT\n       |      DISTINCT campaignId\n       |     FROM\n       |      `marquee-141818.campaigns.marquee_campaigns_&quot;, &quot;`\n       |     WHERE\n       |      campaignSource = \'QUICKSILVER\')) label\n       |LEFT JOIN (\n       |  SELECT\n       |    id,\n       |    campaign_type\n       |  FROM\n       |    `users-protection.ucd.campaigns_&quot;, &quot;`\n       |  WHERE\n       |    # Conditional on channel is necessary, as campaign_id is not globally identifiable\n       |    channel=\&quot;inapp\&quot;\n       |    AND campaign_type IS NOT NULL\n       |    AND campaign_type!=\&quot;\&quot;) meta\n       |ON\n       |  label.campaign_id=meta.id\n       |&quot;).s(partition, partition, partition, partition, partition, partition, partition)).stripMargin</description><symbolName>scala.collection.immutable.StringLike.stripMargin</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>202</id><start>1431</start><end>1431</end><line>40</line><description>qual$2.waitUntilDone$default$2</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTables</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables</fullClassName><method>pushLabelQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>238</id><start>288</start><end>2420</end><line>63</line><description>scala.Predef.augmentString(scala.StringContext.apply(&quot;\n       |#standardSQL\n       |  # Functions to Make sure that the click happened in the correct time period\n       |CREATE TEMP FUNCTION\n       |  checkClickTime(clickTime ANY TYPE) AS (clickTime &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR clickTime IS NULL);\n       |SELECT\n       |  label.*,\n       |  meta.campaign_type\n       |FROM (\n       |  SELECT\n       |    \&quot;&quot;, &quot;\&quot; AS date,\n       |    channel,\n       |    user_id,\n       |    message_id,\n       |    push.campaign_id,\n       |    STRING(push.time_send) AS time_send,\n       |    push.os_level_unsub,\n       |    push.optout_diff,\n       |    # Safety for backfills\n       |    # Keeps definition of convert within 3 days of delivery\n       |    (CASE\n       |        WHEN checkClickTime(push.time_click) THEN STRING(push.time_click)\n       |        ELSE NULL END) AS time_click,\n       |    (CASE\n       |        WHEN checkClickTime(push.time_click) THEN TIMESTAMP_DIFF(push.time_click, push.time_send, HOUR)\n       |        ELSE NULL END) AS hrs_to_click,\n       |    push.optout_type AS optout_type,\n       |    (CASE\n       |        WHEN checkClickTime(push.time_click) THEN push.clicked\n       |        ELSE 0 END) AS clicked\n       |  FROM\n       |    `users-protection.ccd.communications_health_&quot;, &quot;`\n       |  WHERE\n       |    channel = \&quot;push\&quot;\n       |    AND push.optout_type IS NOT NULL\n       |    AND LOWER(push.optout_type) NOT LIKE \&quot;%transactional%\&quot;\n       |    AND push.time_send &lt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*2 HOUR)\n       |    AND push.time_send &gt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*3 HOUR)) label\n       |LEFT JOIN (\n       |  SELECT\n       |    id,\n       |    campaign_type\n       |  FROM\n       |    `users-protection.ucd.campaigns_&quot;, &quot;`\n       |  WHERE\n       |    # Conditional on channel is necessary, as campaign_id is not globally identifiable\n       |    channel=\&quot;push\&quot;\n       |    AND campaign_type IS NOT NULL\n       |    AND campaign_type!=\&quot;\&quot;) meta\n       |ON\n       |  label.campaign_id=meta.id\n       |&quot;).s(partition, partition, partition, partition, partition, partition)).stripMargin</description><symbolName>scala.collection.immutable.StringLike.stripMargin</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>142</id><start>376</start><end>388</end><line>14</line><description>args.apply(&quot;date&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>151</id><start>610</start><end>610</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$4</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggTable</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables.UserAggTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>250</id><start>6364</start><end>6364</end><line>125</line><description>&quot;UserAggTable&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>223</id><start>116</start><end>116</end><line>7</line><description>&quot;ExperimentFeaturesTable&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>schema</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>232</id><start>2268</start><end>2268</end><line>64</line><description>com.spotify.scio.bigquery.types.BigQueryType.schemaOf[com.spotify.tf.InAppLabelTables.InAppLabelTable](({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.InAppLabelTables.InAppLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $m.staticClass(&quot;com.spotify.tf.InAppLabelTables.InAppLabelTable&quot;).asType.toTypeConstructor
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.InAppLabelTables.InAppLabelTable]))</description><symbolName>com.spotify.scio.bigquery.types.BigQueryType.schemaOf</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>124</id><start>6978</start><end>6978</end><line>187</line><description>coders.this.Coder.stringCoder</description><symbolName>com.spotify.scio.coders.instances.ScalaCoders.stringCoder</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>106</id><start>6115</start><end>6166</end><line>169</line><description>scala.Predef.augmentString(args.optional(&quot;sample&quot;).getOrElse[String](&quot;true&quot;)).toBoolean</description><symbolName>scala.collection.immutable.StringLike.toBoolean</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>133</id><start>7479</start><end>7489</end><line>200</line><description>sampleRate</description><symbolName>com.spotify.tf.FeatureToTfRecord.sampleRate</symbolName><treeName>Ident</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>205</id><start>1955</start><end>1999</end><line>53</line><description>bigqueryPath.replace(&quot;bq://&quot;, &quot;&quot;).split(&quot;/&quot;)</description><symbolName>java.lang.String.split</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>tupled</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>214</id><start>3848</start><end>3848</end><line>99</line><description>EmailLabelTables.this.EmailLabelTable.apply(date, channel, user_id, message_id, campaign_id, time_delivered, first_open, hrs_to_open, optout_type, opened, cnt_open, clicked, cnt_click, unsubscribed, campaign_type)</description><symbolName>com.spotify.tf.EmailLabelTables.EmailLabelTable.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>160</id><start>236</start><end>274</end><line>9</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>169</id><start>603</start><end>617</end><line>20</line><description>com.spotify.scio.bigquery.`package`.toBigQuerySCollection[com.spotify.tf.PushLabelTables.PushLabelTable](pushLabelsRows)</description><symbolName>com.spotify.scio.bigquery.toBigQuerySCollection</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>178</id><start>668</start><end>694</end><line>23</line><description>qual$2.waitUntilDone(x$6, x$7)</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>115</id><start>6564</start><end>6598</end><line>179</line><description>args.apply(scala.StringContext.apply(&quot;labels_&quot;, &quot;_days_back&quot;).s(index))</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>187</id><start>940</start><end>964</end><line>27</line><description>args.apply(&quot;usersTableToJoin&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>196</id><start>1375</start><end>1375</end><line>38</line><description>qual$1.saveAsTypedBigQuery$default$3</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>schema</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>241</id><start>2429</start><end>2429</end><line>66</line><description>com.spotify.scio.bigquery.types.BigQueryType.schemaOf[com.spotify.tf.PushLabelTables.PushLabelTable](({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.PushLabelTables.PushLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $m.staticClass(&quot;com.spotify.tf.PushLabelTables.PushLabelTable&quot;).asType.toTypeConstructor
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.PushLabelTables.PushLabelTable]))</description><symbolName>com.spotify.scio.bigquery.types.BigQueryType.schemaOf</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>181</id><start>332</start><end>370</end><line>12</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>163</id><start>395</start><end>407</end><line>14</line><description>args.apply(&quot;date&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>172</id><start>625</start><end>625</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$4</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>46</id><start>3519</start><end>3542</end><line>106</line><description>args.apply(&quot;evaluation_data&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>118</id><start>6793</start><end>6805</end><line>183</line><description>getUserId.apply(f)</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>127</id><start>6419</start><end>7001</end><line>176</line><description>scala.Predef.intWrapper(0).to(daysPrior.-(1)).toList.map[com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))], List[com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))]]](((index: Int) =&gt; {
  val index_days_prior: Int = index.+(daysPriorUseragg);
  val labels: String = args.apply(scala.StringContext.apply(&quot;labels_&quot;, &quot;_days_back&quot;).s(index));
  val userAggs: String = args.apply(scala.StringContext.apply(&quot;user-aggregations_&quot;, &quot;_days_back&quot;).s(index_days_prior));
  val labelsRows: com.spotify.scio.values.SCollection[(String, T)] = com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[T](labels)(evidence$4, evidence$5, evidence$6).keyBy[String](((f: T) =&gt; getUserId.apply(f)))(coders.this.Coder.tuple2Coder[String, T]({
    val inst$macro$293: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder.asInstanceOf[com.spotify.scio.coders.Coder[String]];
    shapeless.Strict.apply[com.spotify.scio.coders.Coder[String]](inst$macro$293)
  }, {
    val inst$macro$295: com.spotify.scio.coders.Coder[T] = evidence$6.asInstanceOf[com.spotify.scio.coders.Coder[T]];
    shapeless.Strict.apply[com.spotify.scio.coders.Coder[T]](inst$macro$295)
  }));
  val userAggRows: com.spotify.scio.values.SCollection[(String, com.spotify.tf.UserAggregateTables.UserAggTable)] = com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.UserAggregateTables.UserAggTable](userAggs)((ClassTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable](classOf[com.spotify.tf.UserAggregateTables$$UserAggTable]): scala.reflect.ClassTag[com.spotify.tf.UserAggregateTables.UserAggTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable]($m, {
    final class $typecreator5 extends TypeCreator {
      def &lt;init&gt;(): $typecreator5 = {
        $typecreator5.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.UserAggregateTables&quot;)), $m.staticClass(&quot;com.spotify.tf.UserAggregateTables.UserAggTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator5()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.UserAggregateTables.UserAggTable]), {
  val paramTypeclass$macro$298: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$305: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$312: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$313: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$320: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$321: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$321.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$298), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$298), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$298), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$297: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$297, false, false, parameters$macro$321, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$321.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$321.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$321.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$321.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$321.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$321.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$321.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$321.length, typeName$macro$297.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}).keyBy[String](((k: com.spotify.tf.UserAggregateTables.UserAggTable) =&gt; k.user_id))(coders.this.Coder.tuple2Coder[String, com.spotify.tf.UserAggregateTables.UserAggTable]({
    val inst$macro$362: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder.asInstanceOf[com.spotify.scio.coders.Coder[String]];
    shapeless.Strict.apply[com.spotify.scio.coders.Coder[String]](inst$macro$362)
  }, {
    val inst$macro$385: com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
  val paramTypeclass$macro$366: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$373: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$374: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$375: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$382: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$383: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$383.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$365: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$365, false, false, parameters$macro$383, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$383.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$383.length, typeName$macro$365.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}.asInstanceOf[com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable]];
    shapeless.Strict.apply[com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable]](inst$macro$385)
  }));
  values.this.SCollection.makePairSCollectionFunctions[String, T](labelsRows).leftOuterJoin[com.spotify.tf.UserAggregateTables.UserAggTable](userAggRows)({
    val paramTypeclass$macro$388: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
    ();
    val paramTypeclass$macro$389: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
    ();
    val paramTypeclass$macro$390: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
    ();
    val paramTypeclass$macro$391: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    val paramTypeclass$macro$392: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    ();
    val parameters$macro$393: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
    parameters$macro$393.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$388), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$388), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$388), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$391), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$389), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$392), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$393.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$390), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$387: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
    coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
      final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$387, false, false, parameters$macro$393, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$393.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$393.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$393.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$393.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$393.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$393.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$393.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$393.apply(55)).asInstanceOf[Option[String]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$393.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$393.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$393.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$393.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$393.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$393.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$393.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$393.length, typeName$macro$387.full);
          new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
        }
      };
      new $anon()
    })
  }, coders.this.Coder.stringCoder, evidence$6)
}))(immutable.this.List.canBuildFrom[com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))]])</description><symbolName>scala.collection.immutable.List.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>199</id><start>1350</start><end>1414</end><line>38</line><description>qual$1.saveAsTypedBigQuery(x$2, x$3, x$4, x$5)(({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(classOf[com.spotify.tf.UserAggregatesJobBase].getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable]($m, {
    final class $typecreator2 extends TypeCreator {
      def &lt;init&gt;(): $typecreator2 = {
        $typecreator2.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.UserAggregateTables&quot;)), $m.staticClass(&quot;com.spotify.tf.UserAggregateTables.UserAggTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator2()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.UserAggregateTables.UserAggTable]), scala.Predef.$conforms[com.spotify.tf.UserAggregateTables.UserAggTable], {
  val paramTypeclass$macro$458: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$465: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$472: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$473: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$480: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$481: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$481.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$458), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$458), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$458), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$472), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$472), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$473), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$473), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$473), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$473), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$472), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$472), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$465), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$480), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$472), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$481.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$472), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$457: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$457, false, false, parameters$macro$481, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$481.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$481.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$481.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$481.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$481.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$481.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$481.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$481.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$481.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$481.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$481.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$481.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$481.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$481.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$481.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$481.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$481.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$481.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$481.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$481.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$481.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$481.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$481.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$481.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$481.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$481.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$481.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$481.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$481.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$481.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$481.length, typeName$macro$457.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>136</id><start>7024</start><end>7555</end><line>191</line><description>joinedRowsList.reduceLeft[com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))]](((a: com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))], b: com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))]) =&gt; a.union(b))).filter(((x0$5: (String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))) =&gt; x0$5 match {
  case (_1: String, _2: (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))((userId @ (_: String)), (_1: T, _2: Option[com.spotify.tf.UserAggregateTables.UserAggTable])(T, Option[com.spotify.tf.UserAggregateTables.UserAggTable])((labelRow @ evidence$4.unapply(&lt;unapply-selector&gt;) &lt;unapply&gt; ((_: T))), (userAggRow @ (_: Option[com.spotify.tf.UserAggregateTables.UserAggTable])))) =&gt; {
    val chance: Float = java.util.concurrent.ThreadLocalRandom.current().nextFloat();
    val sampleProb: Float = if (getLabel.apply(labelRow).equals(1L))
      sampleRate.*(oversampleRate)
    else
      sampleRate;
    sample.unary_!.||(chance.&lt;(sampleProb))
  }
}))</description><symbolName>com.spotify.scio.values.SCollection.filter</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>208</id><start>2026</start><end>2039</end><line>54</line><description>BQLocation.apply(1)</description><symbolName>scala.Array.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>217</id><start>3848</start><end>3848</end><line>99</line><description>this.schema</description><symbolName>com.spotify.tf.EmailLabelTables.EmailLabelTable.schema</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>100</id><start>5434</start><end>5634</end><line>155</line><description>data.map[org.tensorflow.example.Example](((x0$4: com.spotify.tf.ExperimentTables.ExperimentFeaturesTable) =&gt; x0$4 match {
  case (record @ _) =&gt; ExperimentFeatureConverter.exampleConverter.toExample(ExperimentFeatureConverter.ExperimentFeatures.apply(record))
}))(coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example])))</description><symbolName>com.spotify.scio.values.SCollection.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>82</id><start>4718</start><end>4726</end><line>137</line><description>x$6.opened</description><symbolName>com.spotify.tf.EmailLabelTables.EmailLabelTable.opened</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>109</id><start>6268</start><end>6316</end><line>171</line><description>args.optional(&quot;over-sample-rate&quot;).getOrElse[String](&quot;1&quot;)</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>91</id><start>5066</start><end>5066</end><line>146</line><description>coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example]))</description><symbolName>com.spotify.scio.coders.instances.ProtobufCoders.protoMessageCoder</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>190</id><start>1188</start><end>1236</end><line>32</line><description>com.spotify.tf.UserAggregateTables.userAggregatesQuery(partition, labelTableToJoin)</description><symbolName>com.spotify.tf.UserAggregateTables.userAggregatesQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>64</id><start>4034</start><end>4034</end><line>117</line><description>qual$2.saveAsTfExampleFile$default$3</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile$default$3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>55</id><start>3963</start><end>3971</end><line>116</line><description>com.spotify.scio.tensorflow.`package`.makeTFExampleSCollectionFunctions[org.tensorflow.example.Example](trainRaw)</description><symbolName>com.spotify.scio.tensorflow.TensorFlowImplicits.makeTFExampleSCollectionFunctions</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>73</id><start>4254</start><end>4261</end><line>124</line><description>&quot;EMAIL&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>145</id><start>489</start><end>516</end><line>18</line><description>scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>154</id><start>653</start><end>663</end><line>23</line><description>sc.close()</description><symbolName>com.spotify.scio.ScioContext.close</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>85</id><start>4744</start><end>4744</end><line>138</line><description>coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example]))</description><symbolName>com.spotify.scio.coders.instances.ProtobufCoders.protoMessageCoder</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>94</id><start>5399</start><end>5423</end><line>154</line><description>args.apply(&quot;experiment_table&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>67</id><start>4079</start><end>4089</end><line>119</line><description>sc.close()</description><symbolName>com.spotify.scio.ScioContext.close</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>58</id><start>3972</start><end>3972</end><line>116</line><description>qual$1.saveAsTfExampleFile$default$3</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile$default$3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>139</id><start>217</start><end>255</end><line>9</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ExperimentFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentFeatureConverter</fullClassName><method>toExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>40</id><start>3125</start><end>3159</end><line>93</line><description>ExperimentFeatureConverter.this.exampleConverter.toExample(record)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>49</id><start>3641</start><end>3694</end><line>108</line><description>args.optional(&quot;num-shuffle-shards&quot;).getOrElse[String](&quot;7919&quot;)</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>130</id><start>7324</start><end>7353</end><line>196</line><description>getLabel.apply(labelRow).equals(1L)</description><symbolName>scala.Any.equals</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>4</id><start>340</start><end>340</end><line>12</line><description>x$1._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>13</id><start>631</start><end>631</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$3</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>121</id><start>6904</start><end>6913</end><line>185</line><description>k.user_id</description><symbolName>com.spotify.tf.UserAggregateTables.UserAggTable.user_id</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>148</id><start>587</start><end>602</end><line>20</line><description>com.spotify.scio.bigquery.`package`.toBigQuerySCollection[com.spotify.tf.InAppLabelTables.InAppLabelTable](inAppLabelsRows)</description><symbolName>com.spotify.scio.bigquery.toBigQuerySCollection</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>157</id><start>653</start><end>679</end><line>23</line><description>qual$2.waitUntilDone(x$6, x$7)</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ChannelFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ChannelFeatureConverter</fullClassName><method>exampleConverter</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>22</id><start>1097</start><end>1097</end><line>29</line><description>derive.this.`package`.toExampleConverter[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]({
  val channelfeaturesTypeclass$macro$23: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] = {
    val paramTypeclass$macro$25: com.spotify.tfexample.derive.FeatureBuilder[T] = evidence$1;
    val paramTypeclass$macro$41: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$26: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$28: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$31: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$34: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$35: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$38: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$39: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$39.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$28), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$28), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$28), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$35), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$31), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$38), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$39.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$34), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$27: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$27, false, false, parameters$macro$39, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$39.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$39.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$39.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$39.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$39.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$39.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$39.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$39.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$39.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$39.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$39.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$39.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$39.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$39.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$39.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$39.length, typeName$macro$27.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$26
    });
    val parameters$macro$42: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]](2);
    parameters$macro$42.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T], T](&quot;labelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[T]](paramTypeclass$macro$25), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$42.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T], Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$41), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$24: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ChannelFeatureConverter&quot;, &quot;ChannelFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$24, false, false, parameters$macro$42, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] =&gt; Return): com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T] = new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](makeParam.apply(parameters$macro$42.apply(0)).asInstanceOf[T], makeParam.apply(parameters$macro$42.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] = new mercator.Ops[F,T](makeParam.apply(parameters$macro$42.apply(0)).asInstanceOf[F[T]]).flatMap[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](((p0: T) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$42.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T] = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$42.length, typeName$macro$24.full);
          new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](fieldValues.apply(0).asInstanceOf[T], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  channelfeaturesTypeclass$macro$23
})</description><symbolName>com.spotify.tfexample.derive.Implicits.toExampleConverter</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>InAppFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppFeatureConverter</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>31</id><start>2115</start><end>2146</end><line>59</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.InAppFeatureConverter.InAppFeatures](derive.this.`package`.toExampleConverter[com.spotify.tf.InAppFeatureConverter.InAppFeatures]({
  val inappfeaturesTypeclass$macro$94: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppFeatureConverter.InAppFeatures] = {
    val paramTypeclass$macro$105: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppLabelTables.InAppLabelTable] = {
      val inapplabeltableTypeclass$macro$96: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppLabelTables.InAppLabelTable] = {
        val paramTypeclass$macro$98: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$99: com.spotify.tfexample.derive.FeatureBuilder[Long] = derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping);
        val paramTypeclass$macro$102: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        val parameters$macro$103: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]](9);
        parameters$macro$103.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;The date of email conversion process&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Channel reached - should always be email&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;{ policy: { semanticType: userId }, description: \'Id of user reached with an email\' }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Identifier of the email sent&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;trigger&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Long](&quot;clicked&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$99), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[String]](&quot;campaign_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$102), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$97: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppLabelTables&quot;, &quot;InAppLabelTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.InAppLabelTables.InAppLabelTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$97, false, false, parameters$macro$103, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: Email Open Labelled Data for user protection models}&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; Return): com.spotify.tf.InAppLabelTables.InAppLabelTable = new com.spotify.tf.InAppLabelTables.InAppLabelTable(makeParam.apply(parameters$macro$103.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(6)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(7)).asInstanceOf[Long], makeParam.apply(parameters$macro$103.apply(8)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppLabelTables.InAppLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p5: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(6)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p6: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$103.apply(7)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p7: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$103.apply(8)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p8: Option[String]) =&gt; new com.spotify.tf.InAppLabelTables.InAppLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppLabelTables.InAppLabelTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$103.length, typeName$macro$97.full);
              new com.spotify.tf.InAppLabelTables.InAppLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[String], fieldValues.apply(7).asInstanceOf[Long], fieldValues.apply(8).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      inapplabeltableTypeclass$macro$96
    };
    val paramTypeclass$macro$119: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$106: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$108: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$111: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$112: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$113: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$116: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$117: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$117.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$108), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$108), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$108), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$107: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$107, false, false, parameters$macro$117, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$117.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$117.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$117.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$117.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$117.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$117.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$117.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$117.length, typeName$macro$107.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$106
    });
    val parameters$macro$120: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures]](2);
    parameters$macro$120.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppFeatureConverter.InAppFeatures, com.spotify.tf.InAppLabelTables.InAppLabelTable](&quot;InAppLabelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppLabelTables.InAppLabelTable]](paramTypeclass$macro$105), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$120.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppFeatureConverter.InAppFeatures, Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$119), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$95: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppFeatureConverter&quot;, &quot;InAppFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.InAppFeatureConverter.InAppFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$95, false, false, parameters$macro$120, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures] =&gt; Return): com.spotify.tf.InAppFeatureConverter.InAppFeatures = new com.spotify.tf.InAppFeatureConverter.InAppFeatures(makeParam.apply(parameters$macro$120.apply(0)).asInstanceOf[com.spotify.tf.InAppLabelTables.InAppLabelTable], makeParam.apply(parameters$macro$120.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppFeatureConverter.InAppFeatures] = new mercator.Ops[F,com.spotify.tf.InAppLabelTables.InAppLabelTable](makeParam.apply(parameters$macro$120.apply(0)).asInstanceOf[F[com.spotify.tf.InAppLabelTables.InAppLabelTable]]).flatMap[com.spotify.tf.InAppFeatureConverter.InAppFeatures](((p0: com.spotify.tf.InAppLabelTables.InAppLabelTable) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$120.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.InAppFeatureConverter.InAppFeatures](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.InAppFeatureConverter.InAppFeatures(p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppFeatureConverter.InAppFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$120.length, typeName$macro$95.full);
          new com.spotify.tf.InAppFeatureConverter.InAppFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.InAppLabelTables.InAppLabelTable], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  inappfeaturesTypeclass$macro$94
}))</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>76</id><start>4399</start><end>4408</end><line>129</line><description>x$4.clicked</description><symbolName>com.spotify.tf.PushLabelTables.PushLabelTable.clicked</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>103</id><start>6065</start><end>6091</end><line>168</line><description>args.apply(&quot;days-prior-useragg&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>112</id><start>6424</start><end>6435</end><line>175</line><description>daysPrior.-(1)</description><symbolName>scala.Int.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>16</id><start>608</start><end>668</end><line>21</line><description>qual$1.saveAsTypedBigQuery(x$2, x$3, x$4, x$5)(({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.EmailLabelTables.EmailLabelTable]($m, {
    final class $typecreator2 extends TypeCreator {
      def &lt;init&gt;(): $typecreator2 = {
        $typecreator2.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.EmailLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.EmailLabelTables.EmailLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator2()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.EmailLabelTables.EmailLabelTable]), scala.Predef.$conforms[com.spotify.tf.EmailLabelTables.EmailLabelTable], {
  val paramTypeclass$macro$17: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$18: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val paramTypeclass$macro$19: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$20: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$21: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]](15);
  parameters$macro$21.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;first_open&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$18), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[Long]](&quot;hrs_to_open&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$19), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;optout_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$17), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;opened&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$20), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_open&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$20), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$20), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_click&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$20), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;unsubscribed&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$20), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$21.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;campaign_type&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$18), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$16: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailLabelTables&quot;, &quot;EmailLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.EmailLabelTables.EmailLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$16, false, false, parameters$macro$21, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; Return): com.spotify.tf.EmailLabelTables.EmailLabelTable = new com.spotify.tf.EmailLabelTables.EmailLabelTable(makeParam.apply(parameters$macro$21.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(6)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$21.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$21.apply(8)).asInstanceOf[String], makeParam.apply(parameters$macro$21.apply(9)).asInstanceOf[Long], makeParam.apply(parameters$macro$21.apply(10)).asInstanceOf[Long], makeParam.apply(parameters$macro$21.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$21.apply(12)).asInstanceOf[Long], makeParam.apply(parameters$macro$21.apply(13)).asInstanceOf[Long], makeParam.apply(parameters$macro$21.apply(14)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailLabelTables.EmailLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p5: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$21.apply(6)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p6: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$21.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$21.apply(8)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p8: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$21.apply(9)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p9: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$21.apply(10)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p10: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$21.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$21.apply(12)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p12: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$21.apply(13)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p13: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$21.apply(14)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p14: Option[String]) =&gt; new com.spotify.tf.EmailLabelTables.EmailLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailLabelTables.EmailLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$21.length, typeName$macro$16.full);
        new com.spotify.tf.EmailLabelTables.EmailLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Option[String]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[String], fieldValues.apply(9).asInstanceOf[Long], fieldValues.apply(10).asInstanceOf[Long], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Long], fieldValues.apply(13).asInstanceOf[Long], fieldValues.apply(14).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>97</id><start>5570</start><end>5623</end><line>158</line><description>ExperimentFeatureConverter.ExperimentFeatures.apply(record)</description><symbolName>com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>7</id><start>467</start><end>493</end><line>17</line><description>com.spotify.tf.EmailLabelTables.emailLabelQuery(partition)</description><symbolName>com.spotify.tf.EmailLabelTables.emailLabelQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>79</id><start>4426</start><end>4426</end><line>130</line><description>coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example]))</description><symbolName>com.spotify.scio.coders.instances.ProtobufCoders.protoMessageCoder</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>88</id><start>5039</start><end>5048</end><line>145</line><description>x$8.clicked</description><symbolName>com.spotify.tf.InAppLabelTables.InAppLabelTable.clicked</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>70</id><start>4079</start><end>4105</end><line>119</line><description>qual$3.waitUntilDone(x$18, x$19)</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>52</id><start>3721</start><end>3766</end><line>110</line><description>FeatureToTfRecord.this.matchChannel(channel.toUpperCase(), args, sc)</description><symbolName>com.spotify.tf.FeatureToTfRecord.matchChannel</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>43</id><start>3373</start><end>3373</end><line>103</line><description>x$1._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggTable</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables.UserAggTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>249</id><start>6364</start><end>6364</end><line>125</line><description>this.schema</description><symbolName>com.spotify.tf.UserAggregateTables.UserAggTable.schema</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ChannelFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ChannelFeatureConverter</fullClassName><method>fromExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>25</id><start>1323</start><end>1375</end><line>36</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](derive.this.`package`.toExampleConverter[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]({
  val channelfeaturesTypeclass$macro$44: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] = {
    val paramTypeclass$macro$46: com.spotify.tfexample.derive.FeatureBuilder[T] = evidence$3;
    val paramTypeclass$macro$62: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$47: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$49: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$52: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$55: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$56: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$59: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$60: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$60.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$49), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$49), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$49), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$55), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$55), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$56), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$56), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$56), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$56), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$55), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$55), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$52), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$59), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$55), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$60.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$55), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$48: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$48, false, false, parameters$macro$60, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$60.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$60.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$60.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$60.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$60.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$60.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$60.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$60.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$60.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$60.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$60.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$60.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$60.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$60.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$60.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$60.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$60.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$60.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$60.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$60.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$60.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$60.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$60.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$60.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$60.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$60.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$60.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$60.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$60.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$60.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$60.length, typeName$macro$48.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$47
    });
    val parameters$macro$63: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]](2);
    parameters$macro$63.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T], T](&quot;labelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[T]](paramTypeclass$macro$46), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$63.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T], Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$62), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$45: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ChannelFeatureConverter&quot;, &quot;ChannelFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$45, false, false, parameters$macro$63, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] =&gt; Return): com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T] = new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](makeParam.apply(parameters$macro$63.apply(0)).asInstanceOf[T], makeParam.apply(parameters$macro$63.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]] = new mercator.Ops[F,T](makeParam.apply(parameters$macro$63.apply(0)).asInstanceOf[F[T]]).flatMap[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](((p0: T) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$63.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T]](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T] = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$63.length, typeName$macro$45.full);
          new com.spotify.tf.ChannelFeatureConverter.ChannelFeatures[T](fieldValues.apply(0).asInstanceOf[T], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  channelfeaturesTypeclass$macro$44
})).fromExample(ex)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.fromExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>PushFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.PushFeatureConverter</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>34</id><start>2607</start><end>2607</end><line>74</line><description>derive.this.`package`.toExampleConverter[com.spotify.tf.PushFeatureConverter.PushFeatures]({
  val pushfeaturesTypeclass$macro$122: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushFeatureConverter.PushFeatures] = {
    val paramTypeclass$macro$138: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushLabelTables.PushLabelTable] = {
      val pushlabeltableTypeclass$macro$124: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushLabelTables.PushLabelTable] = {
        val paramTypeclass$macro$126: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$127: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        val paramTypeclass$macro$128: com.spotify.tfexample.derive.FeatureBuilder[Float] = derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping);
        val paramTypeclass$macro$131: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        val paramTypeclass$macro$134: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$135: com.spotify.tfexample.derive.FeatureBuilder[Long] = derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping);
        ();
        val parameters$macro$136: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]](13);
        parameters$macro$136.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;The date of push conversion process&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Channel reached - should always be push&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;{ policy: { semanticType: userId }, description: \'Id of user reached with a push\' }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Identifier of the push sent&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;time_send&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Int](&quot;os_level_unsub&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$127), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Float](&quot;optout_diff&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Float]](paramTypeclass$macro$128), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;time_click&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$131), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[Long]](&quot;hrs_to_click&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$134), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;optout_type&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$126), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$135), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$136.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;campaign_type&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$131), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$125: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushLabelTables&quot;, &quot;PushLabelTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.PushLabelTables.PushLabelTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$125, false, false, parameters$macro$136, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: Push Click Labelled Data for user protection models}&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; Return): com.spotify.tf.PushLabelTables.PushLabelTable = new com.spotify.tf.PushLabelTables.PushLabelTable(makeParam.apply(parameters$macro$136.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$136.apply(7)).asInstanceOf[Float], makeParam.apply(parameters$macro$136.apply(8)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$136.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$136.apply(10)).asInstanceOf[String], makeParam.apply(parameters$macro$136.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$136.apply(12)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushLabelTables.PushLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p5: String) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$136.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p6: Int) =&gt; new mercator.Ops[F,Float](makeParam.apply(parameters$macro$136.apply(7)).asInstanceOf[F[Float]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p7: Float) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$136.apply(8)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p8: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$136.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$136.apply(10)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p10: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$136.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$136.apply(12)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.PushLabelTables.PushLabelTable](((p12: Option[String]) =&gt; new com.spotify.tf.PushLabelTables.PushLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushLabelTables.PushLabelTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$136.length, typeName$macro$125.full);
              new com.spotify.tf.PushLabelTables.PushLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Float], fieldValues.apply(8).asInstanceOf[Option[String]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[String], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      pushlabeltableTypeclass$macro$124
    };
    val paramTypeclass$macro$150: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$139: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$141: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$142: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$143: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$144: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$147: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$148: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$148.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$141), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$141), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$141), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$144), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$142), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$147), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$148.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$143), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$140: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$140, false, false, parameters$macro$148, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$148.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$148.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$148.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$148.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$148.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$148.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$148.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$148.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$148.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$148.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$148.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$148.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$148.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$148.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$148.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$148.length, typeName$macro$140.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$139
    });
    val parameters$macro$151: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures]](2);
    parameters$macro$151.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushFeatureConverter.PushFeatures, com.spotify.tf.PushLabelTables.PushLabelTable](&quot;pushLabelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.PushLabelTables.PushLabelTable]](paramTypeclass$macro$138), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$151.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.PushFeatureConverter.PushFeatures, Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$150), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$123: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushFeatureConverter&quot;, &quot;PushFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.PushFeatureConverter.PushFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$123, false, false, parameters$macro$151, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures] =&gt; Return): com.spotify.tf.PushFeatureConverter.PushFeatures = new com.spotify.tf.PushFeatureConverter.PushFeatures(makeParam.apply(parameters$macro$151.apply(0)).asInstanceOf[com.spotify.tf.PushLabelTables.PushLabelTable], makeParam.apply(parameters$macro$151.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.PushFeatureConverter.PushFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushFeatureConverter.PushFeatures] = new mercator.Ops[F,com.spotify.tf.PushLabelTables.PushLabelTable](makeParam.apply(parameters$macro$151.apply(0)).asInstanceOf[F[com.spotify.tf.PushLabelTables.PushLabelTable]]).flatMap[com.spotify.tf.PushFeatureConverter.PushFeatures](((p0: com.spotify.tf.PushLabelTables.PushLabelTable) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$151.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.PushFeatureConverter.PushFeatures](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.PushFeatureConverter.PushFeatures(p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushFeatureConverter.PushFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$151.length, typeName$macro$123.full);
          new com.spotify.tf.PushFeatureConverter.PushFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.PushLabelTables.PushLabelTable], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  pushfeaturesTypeclass$macro$122
})</description><symbolName>com.spotify.tfexample.derive.Implicits.toExampleConverter</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>tupled</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>240</id><start>2429</start><end>2429</end><line>66</line><description>{
  ((date: String, channel: String, user_id: String, message_id: String, campaign_id: String, time_send: String, os_level_unsub: Int, optout_diff: Float, time_click: Option[String], hrs_to_click: Option[Long], optout_type: String, clicked: Long, campaign_type: Option[String]) =&gt; PushLabelTables.this.PushLabelTable.apply(date, channel, user_id, message_id, campaign_id, time_send, os_level_unsub, optout_diff, time_click, hrs_to_click, optout_type, clicked, campaign_type))
}.tupled</description><symbolName>scala.Function13.tupled</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>61</id><start>4020</start><end>4033</end><line>117</line><description>com.spotify.scio.tensorflow.`package`.makeTFExampleSCollectionFunctions[org.tensorflow.example.Example](evaluationRaw)</description><symbolName>com.spotify.scio.tensorflow.TensorFlowImplicits.makeTFExampleSCollectionFunctions</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>10</id><start>565</start><end>603</end><line>19</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.EmailLabelTables.EmailLabelTable](sql)((ClassTag.apply[com.spotify.tf.EmailLabelTables.EmailLabelTable](classOf[com.spotify.tf.EmailLabelTables$$EmailLabelTable]): scala.reflect.ClassTag[com.spotify.tf.EmailLabelTables.EmailLabelTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.EmailLabelTables.EmailLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.EmailLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.EmailLabelTables.EmailLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.EmailLabelTables.EmailLabelTable]), {
  val paramTypeclass$macro$3: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$4: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val paramTypeclass$macro$11: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$12: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$13: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]](15);
  parameters$macro$13.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;first_open&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$4), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[Long]](&quot;hrs_to_open&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$11), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;optout_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$3), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;opened&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$12), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_open&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$12), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$12), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_click&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$12), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;unsubscribed&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$12), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$13.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;campaign_type&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$4), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$2: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailLabelTables&quot;, &quot;EmailLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.EmailLabelTables.EmailLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$2, false, false, parameters$macro$13, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; Return): com.spotify.tf.EmailLabelTables.EmailLabelTable = new com.spotify.tf.EmailLabelTables.EmailLabelTable(makeParam.apply(parameters$macro$13.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(6)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$13.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$13.apply(8)).asInstanceOf[String], makeParam.apply(parameters$macro$13.apply(9)).asInstanceOf[Long], makeParam.apply(parameters$macro$13.apply(10)).asInstanceOf[Long], makeParam.apply(parameters$macro$13.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$13.apply(12)).asInstanceOf[Long], makeParam.apply(parameters$macro$13.apply(13)).asInstanceOf[Long], makeParam.apply(parameters$macro$13.apply(14)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailLabelTables.EmailLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p5: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$13.apply(6)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p6: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$13.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$13.apply(8)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p8: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$13.apply(9)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p9: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$13.apply(10)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p10: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$13.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$13.apply(12)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p12: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$13.apply(13)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p13: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$13.apply(14)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p14: Option[String]) =&gt; new com.spotify.tf.EmailLabelTables.EmailLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailLabelTables.EmailLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$13.length, typeName$macro$2.full);
        new com.spotify.tf.EmailLabelTables.EmailLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Option[String]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[String], fieldValues.apply(9).asInstanceOf[Long], fieldValues.apply(10).asInstanceOf[Long], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Long], fieldValues.apply(13).asInstanceOf[Long], fieldValues.apply(14).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQueryScioContext.typedBigQuery</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>189</id><start>993</start><end>1172</end><line>30</line><description>scala.collection.Seq.apply[String](labelTableToJoinRef.getProjectId(), labelTableToJoinRef.getDatasetId(), labelTableToJoinRef.getTableId()).mkString(&quot;.&quot;)</description><symbolName>scala.collection.TraversableOnce.mkString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>table</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>225</id><start>116</start><end>116</end><line>7</line><description>&quot;%s&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>PushFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.PushFeatureConverter</fullClassName><method>fromExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>37</id><start>2775</start><end>2811</end><line>80</line><description>PushFeatureConverter.this.pushExampleConverter.fromExample(ex)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.fromExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>180</id><start>356</start><end>369</end><line>12</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>1</id><start>262</start><end>275</end><line>9</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>207</id><start>2020</start><end>2023</end><line>54</line><description>&quot;:&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>schema</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>216</id><start>3848</start><end>3848</end><line>99</line><description>com.spotify.scio.bigquery.types.BigQueryType.schemaOf[com.spotify.tf.EmailLabelTables.EmailLabelTable](({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.EmailLabelTables.EmailLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $m.staticClass(&quot;com.spotify.tf.EmailLabelTables.EmailLabelTable&quot;).asType.toTypeConstructor
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.EmailLabelTables.EmailLabelTable]))</description><symbolName>com.spotify.scio.bigquery.types.BigQueryType.schemaOf</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>198</id><start>1394</start><end>1394</end><line>38</line><description>scala.Predef.$conforms[com.spotify.tf.UserAggregateTables.UserAggTable]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggTable</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables.UserAggTable</fullClassName><method>tableDescription</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>252</id><start>6490</start><end>6490</end><line>128</line><description>&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>19</id><start>685</start><end>685</end><line>23</line><description>qual$2.waitUntilDone$default$2</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>EmailFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailFeatureConverter</fullClassName><method>toExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>28</id><start>1720</start><end>1759</end><line>48</line><description>EmailFeatureConverter.this.emailExampleConverter.toExample(record)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>234</id><start>2268</start><end>2268</end><line>64</line><description>&quot;InAppLabelTable&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>243</id><start>2429</start><end>2429</end><line>66</line><description>&quot;PushLabelTable&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>147</id><start>544</start><end>582</end><line>19</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.InAppLabelTables.InAppLabelTable](sql)((ClassTag.apply[com.spotify.tf.InAppLabelTables.InAppLabelTable](classOf[com.spotify.tf.InAppLabelTables$$InAppLabelTable]): scala.reflect.ClassTag[com.spotify.tf.InAppLabelTables.InAppLabelTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.InAppLabelTables.InAppLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.InAppLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.InAppLabelTables.InAppLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.InAppLabelTables.InAppLabelTable]), {
  val paramTypeclass$macro$403: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$404: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  val paramTypeclass$macro$405: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val parameters$macro$406: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]](9);
  parameters$macro$406.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;trigger&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$403), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Long](&quot;clicked&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$404), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$406.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[String]](&quot;campaign_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$405), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$402: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppLabelTables&quot;, &quot;InAppLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.InAppLabelTables.InAppLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$402, false, false, parameters$macro$406, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; Return): com.spotify.tf.InAppLabelTables.InAppLabelTable = new com.spotify.tf.InAppLabelTables.InAppLabelTable(makeParam.apply(parameters$macro$406.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(6)).asInstanceOf[String], makeParam.apply(parameters$macro$406.apply(7)).asInstanceOf[Long], makeParam.apply(parameters$macro$406.apply(8)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppLabelTables.InAppLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p5: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$406.apply(6)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p6: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$406.apply(7)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p7: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$406.apply(8)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p8: Option[String]) =&gt; new com.spotify.tf.InAppLabelTables.InAppLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppLabelTables.InAppLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$406.length, typeName$macro$402.full);
        new com.spotify.tf.InAppLabelTables.InAppLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[String], fieldValues.apply(7).asInstanceOf[Long], fieldValues.apply(8).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQueryScioContext.typedBigQuery</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>174</id><start>603</start><end>662</end><line>21</line><description>qual$1.saveAsTypedBigQuery(x$2, x$3, x$4, x$5)(({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.PushLabelTables.PushLabelTable]($m, {
    final class $typecreator2 extends TypeCreator {
      def &lt;init&gt;(): $typecreator2 = {
        $typecreator2.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.PushLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.PushLabelTables.PushLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator2()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.PushLabelTables.PushLabelTable]), scala.Predef.$conforms[com.spotify.tf.PushLabelTables.PushLabelTable], {
  val paramTypeclass$macro$433: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$434: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  val paramTypeclass$macro$435: com.spotify.scio.coders.Coder[Float] = coders.this.Coder.floatCoder;
  val paramTypeclass$macro$436: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val paramTypeclass$macro$437: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$438: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  ();
  val parameters$macro$439: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]](13);
  parameters$macro$439.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;time_send&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Int](&quot;os_level_unsub&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$434), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Float](&quot;optout_diff&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Float]](paramTypeclass$macro$435), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;time_click&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$436), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[Long]](&quot;hrs_to_click&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$437), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;optout_type&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$433), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$438), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$439.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;campaign_type&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$436), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$432: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushLabelTables&quot;, &quot;PushLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.PushLabelTables.PushLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$432, false, false, parameters$macro$439, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; Return): com.spotify.tf.PushLabelTables.PushLabelTable = new com.spotify.tf.PushLabelTables.PushLabelTable(makeParam.apply(parameters$macro$439.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$439.apply(7)).asInstanceOf[Float], makeParam.apply(parameters$macro$439.apply(8)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$439.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$439.apply(10)).asInstanceOf[String], makeParam.apply(parameters$macro$439.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$439.apply(12)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushLabelTables.PushLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p5: String) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$439.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p6: Int) =&gt; new mercator.Ops[F,Float](makeParam.apply(parameters$macro$439.apply(7)).asInstanceOf[F[Float]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p7: Float) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$439.apply(8)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p8: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$439.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$439.apply(10)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p10: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$439.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$439.apply(12)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.PushLabelTables.PushLabelTable](((p12: Option[String]) =&gt; new com.spotify.tf.PushLabelTables.PushLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushLabelTables.PushLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$439.length, typeName$macro$432.full);
        new com.spotify.tf.PushLabelTables.PushLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Float], fieldValues.apply(8).asInstanceOf[Option[String]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[String], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>156</id><start>664</start><end>664</end><line>23</line><description>qual$2.waitUntilDone$default$2</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>183</id><start>742</start><end>742</end><line>22</line><description>x$1._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTables</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables</fullClassName><method>inAppLabelQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>228</id><start>292</start><end>2247</end><line>11</line><description>scala.StringContext.apply(&quot;\n       |#standardSQL\n       |  # Functions to Make sure that the open happened in the correct time period\n       |CREATE TEMP FUNCTION\n       |  checkClickTime(clickTime ANY TYPE) AS (clickTime &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR clickTime IS NULL );\n       |SELECT\n       |  label.*,\n       |  meta.campaign_type\n       |FROM (\n       |  SELECT\n       |    \&quot;&quot;, &quot;\&quot; AS date,\n       |    channel,\n       |    user_id,\n       |    message_id,\n       |    in_app.campaign_id,\n       |    STRING(in_app.time_delivered) AS time_delivered,\n       |    # Safety for backfills\n       |    # Keeps definition of convert within 7 days of delivery\n       |    in_app.trigger as trigger,\n       |    (CASE\n       |        WHEN checkClickTime(in_app.time_click) THEN in_app.clicked\n       |        ELSE 0 END) AS clicked\n       |  FROM\n       |    `users-protection.ccd.communications_health_&quot;, &quot;`\n       |  WHERE\n       |    channel = \&quot;in_app\&quot;\n       |    AND lower(in_app.trigger) not like \'%upsell%\'\n       |    AND in_app.time_delivered &lt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*6 HOUR)\n       |    AND in_app.time_delivered &gt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*7 HOUR)\n       |    AND in_app.campaign_id in\n       |    (SELECT\n       |      DISTINCT campaignId\n       |     FROM\n       |      `marquee-141818.campaigns.marquee_campaigns_&quot;, &quot;`\n       |     WHERE\n       |      campaignSource = \'QUICKSILVER\')) label\n       |LEFT JOIN (\n       |  SELECT\n       |    id,\n       |    campaign_type\n       |  FROM\n       |    `users-protection.ucd.campaigns_&quot;, &quot;`\n       |  WHERE\n       |    # Conditional on channel is necessary, as campaign_id is not globally identifiable\n       |    channel=\&quot;inapp\&quot;\n       |    AND campaign_type IS NOT NULL\n       |    AND campaign_type!=\&quot;\&quot;) meta\n       |ON\n       |  label.campaign_id=meta.id\n       |&quot;).s(partition, partition, partition, partition, partition, partition, partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>129</id><start>7241</start><end>7280</end><line>194</line><description>java.util.concurrent.ThreadLocalRandom.current().nextFloat()</description><symbolName>java.util.concurrent.ThreadLocalRandom.nextFloat</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>138</id><start>241</start><end>254</end><line>9</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>210</id><start>2048</start><end>2061</end><line>54</line><description>BQLocation.apply(2)</description><symbolName>scala.Array.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>219</id><start>3848</start><end>3848</end><line>99</line><description>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString(this.schema, &quot;EmailLabelTable&quot;, indent)</description><symbolName>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>120</id><start>6739</start><end>6806</end><line>183</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[T](labels)(evidence$4, evidence$5, evidence$6).keyBy[String](((f: T) =&gt; getUserId.apply(f)))(coders.this.Coder.tuple2Coder[String, T]({
  val inst$macro$293: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder.asInstanceOf[com.spotify.scio.coders.Coder[String]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[String]](inst$macro$293)
}, {
  val inst$macro$295: com.spotify.scio.coders.Coder[T] = evidence$6.asInstanceOf[com.spotify.scio.coders.Coder[T]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[T]](inst$macro$295)
}))</description><symbolName>com.spotify.scio.values.SCollection.keyBy</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>165</id><start>465</start><end>490</end><line>17</line><description>com.spotify.tf.PushLabelTables.pushLabelQuery(partition)</description><symbolName>com.spotify.tf.PushLabelTables.pushLabelQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTables</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables</fullClassName><method>pushLabelQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>237</id><start>288</start><end>2408</end><line>11</line><description>scala.StringContext.apply(&quot;\n       |#standardSQL\n       |  # Functions to Make sure that the click happened in the correct time period\n       |CREATE TEMP FUNCTION\n       |  checkClickTime(clickTime ANY TYPE) AS (clickTime &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR clickTime IS NULL);\n       |SELECT\n       |  label.*,\n       |  meta.campaign_type\n       |FROM (\n       |  SELECT\n       |    \&quot;&quot;, &quot;\&quot; AS date,\n       |    channel,\n       |    user_id,\n       |    message_id,\n       |    push.campaign_id,\n       |    STRING(push.time_send) AS time_send,\n       |    push.os_level_unsub,\n       |    push.optout_diff,\n       |    # Safety for backfills\n       |    # Keeps definition of convert within 3 days of delivery\n       |    (CASE\n       |        WHEN checkClickTime(push.time_click) THEN STRING(push.time_click)\n       |        ELSE NULL END) AS time_click,\n       |    (CASE\n       |        WHEN checkClickTime(push.time_click) THEN TIMESTAMP_DIFF(push.time_click, push.time_send, HOUR)\n       |        ELSE NULL END) AS hrs_to_click,\n       |    push.optout_type AS optout_type,\n       |    (CASE\n       |        WHEN checkClickTime(push.time_click) THEN push.clicked\n       |        ELSE 0 END) AS clicked\n       |  FROM\n       |    `users-protection.ccd.communications_health_&quot;, &quot;`\n       |  WHERE\n       |    channel = \&quot;push\&quot;\n       |    AND push.optout_type IS NOT NULL\n       |    AND LOWER(push.optout_type) NOT LIKE \&quot;%transactional%\&quot;\n       |    AND push.time_send &lt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*2 HOUR)\n       |    AND push.time_send &gt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*3 HOUR)) label\n       |LEFT JOIN (\n       |  SELECT\n       |    id,\n       |    campaign_type\n       |  FROM\n       |    `users-protection.ucd.campaigns_&quot;, &quot;`\n       |  WHERE\n       |    # Conditional on channel is necessary, as campaign_id is not globally identifiable\n       |    channel=\&quot;push\&quot;\n       |    AND campaign_type IS NOT NULL\n       |    AND campaign_type!=\&quot;\&quot;) meta\n       |ON\n       |  label.campaign_id=meta.id\n       |&quot;).s(partition, partition, partition, partition, partition, partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggregateTables</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables</fullClassName><method>userAggregatesQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>246</id><start>222</start><end>6343</end><line>9</line><description>scala.StringContext.apply(&quot;\n       |#standardSQL\n       |SELECT\n       |  a.*,\n       |  b.reporting_age_bucket,\n       |  b.gender\n       |FROM (\n       |  SELECT\n       |    user_id,\n       |    country_code,\n       |    dsr,\n       |    dsr_bucket,\n       |    first_platform,\n       |    primary_platform,\n       |    activated AS has_streamed_ever,\n       |    registered_today,\n       |    days_since_last_mau,\n       |    days_since_last_dau,\n       |    #Activity Metrics\n       |    (CASE\n       |        WHEN activity.today.is_dau THEN 1\n       |        ELSE 0 END) AS is_dau,\n       |    (CASE\n       |        WHEN activity.today.is_mau THEN 1\n       |        ELSE 0 END) AS is_mau,\n       |    activity.today.ms_played AS ms_played_day,\n       |    activity.today.num_streams AS num_streams_day,\n       |    activity.last_30d.ms_played AS ms_played_month,\n       |    activity.last_30d.num_streams AS num_streams_month,\n       |    #Product (account type) Metrics\n       |    product.today.product_type,\n       |    product.today.product_category,\n       |    #Message History Metrics (up to 28 days ago)\n       |    message_history_agg.today.num_email AS num_email_yesterday,\n       |    message_history_agg.today.num_email_open AS num_email_open_yesterday,\n       |    message_history_agg.today.num_email_click AS num_email_click_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_email_open,\n       |        message_history_agg.today.num_email),\n       |      0) AS email_open_rate_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_email_click,\n       |        message_history_agg.today.num_email),\n       |      0) AS email_click_deliver_rate_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_email_click,\n       |        message_history_agg.today.num_email_open),\n       |      0) AS email_click_open_rate_yesterday,\n       |    message_history_agg.today.num_push AS num_push_yesterday,\n       |    message_history_agg.today.num_push_click AS num_push_click_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_push_click,\n       |        message_history_agg.today.num_push),\n       |      0) AS push_click_rate_yesterday,\n       |    message_history_agg.today.num_in_app_view AS num_in_app_yesterday,\n       |    message_history_agg.today.num_in_app_click AS num_in_app_click_yesterday,\n       |    ifnull(safe_divide(message_history_agg.today.num_in_app_click,\n       |        message_history_agg.today.num_in_app_view),\n       |      0) AS in_app_click_rate_yesterday,\n       |    message_history_agg.last_week.num_email AS num_email_week,\n       |    message_history_agg.last_week.num_email_open AS num_email_open_week,\n       |    message_history_agg.last_week.num_email_click AS num_email_click_week,\n       |    safe_divide(message_history_agg.last_week.num_email_open,\n       |      message_history_agg.last_week.num_email) AS email_open_rate_week,\n       |    safe_divide(message_history_agg.last_week.num_email_click,\n       |      message_history_agg.last_week.num_email) AS email_click_deliver_rate_week,\n       |    safe_divide(message_history_agg.last_week.num_email_click,\n       |      message_history_agg.last_week.num_email_open) AS email_click_open_rate_week,\n       |    message_history_agg.last_week.num_push num_push_week,\n       |    message_history_agg.last_week.num_push_click AS num_push_click_week,\n       |    safe_divide(message_history_agg.last_week.num_push_click,\n       |      message_history_agg.last_week.num_push) AS push_click_rate_week,\n       |    message_history_agg.last_week.num_in_app_view AS num_in_app_week,\n       |    message_history_agg.last_week.num_in_app_click AS num_in_app_click_week,\n       |    safe_divide(message_history_agg.last_week.num_in_app_click,\n       |      message_history_agg.last_week.num_in_app_view) AS in_app_click_rate_week,\n       |    message_history_agg.last_month.num_email AS num_email_month,\n       |    message_history_agg.last_month.num_email_open AS num_email_open_month,\n       |    message_history_agg.last_month.num_email_click AS num_email_click_month,\n       |    safe_divide(message_history_agg.last_month.num_email_open,\n       |      message_history_agg.last_month.num_email) AS email_open_rate_month,\n       |    safe_divide(message_history_agg.last_month.num_email_click,\n       |      message_history_agg.last_month.num_email) AS email_click_deliver_rate_month,\n       |    safe_divide(message_history_agg.last_month.num_email_click,\n       |      message_history_agg.last_month.num_email_open) AS email_click_open_rate_month,\n       |    message_history_agg.last_month.num_push AS num_push_month,\n       |    message_history_agg.last_month.num_push_click AS num_push_click_month,\n       |    safe_divide(message_history_agg.last_month.num_push_click,\n       |      message_history_agg.last_month.num_push) AS push_click_rate_month,\n       |    message_history_agg.last_month.num_in_app_view AS num_in_app_month,\n       |    message_history_agg.last_month.num_in_app_click AS num_in_app_click_month,\n       |    safe_divide(message_history_agg.last_month.num_in_app_click,\n       |      message_history_agg.last_month.num_in_app_view) AS in_app_click_rate_month\n       |  FROM\n       |    `users-protection.ccd.user_communication_snapshot_&quot;, &quot;`) a\n       |LEFT JOIN\n       |    (\n       |   SELECT\n       |     user_id,\n       |     reporting_age_bucket,\n       |     gender\n       |    FROM `business-critical-data.user_snapshot_4.user_snapshot_4_&quot;, &quot;`) b\n       |ON\n       |  a.user_id = to_hex(b.user_id)\n       |RIGHT JOIN\n       |  # NOTE: label data is allowed to have duplicated user_ids (the same user treats different\n       |    #       messages differently), while we only need unique users to pull their user agg data\n       |  (\n       |  SELECT\n       |    DISTINCT(user_id)\n       |  FROM\n       |    `&quot;, &quot;`) c\n       |ON\n       |  a.user_id = c.user_id\n       |  # NOTE: for some reason we might have null user_id here which need to be filtered out\n       |WHERE\n       |  a.user_id IS NOT NULL\n     &quot;).s(partition, partition, labelTableToJoin)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>192</id><start>1242</start><end>1280</end><line>34</line><description>UserAggregatesJobBase.this.logger.info(scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition))</description><symbolName>org.slf4j.Logger.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>201</id><start>1431</start><end>1431</end><line>40</line><description>qual$2.waitUntilDone$default$1</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>60</id><start>3963</start><end>4015</end><line>116</line><description>qual$1.saveAsTfExampleFile(x$10, x$11, x$12, x$13)</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTables</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables</fullClassName><method>emailLabelQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>213</id><start>292</start><end>3839</end><line>96</line><description>scala.Predef.augmentString(scala.StringContext.apply(&quot;\n       |#standardSQL\n       |  # Functions to Make sure that the open happened in the correct time period\n       |CREATE TEMP FUNCTION\n       |  checkOpenTime(openTime ANY TYPE) AS ((\n       |    SELECT\n       |      MIN(topen.time_open)\n       |    FROM\n       |      UNNEST(openTime) AS topen) &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR (\n       |    SELECT\n       |      MIN(topen.time_open)\n       |    FROM\n       |      UNNEST(openTime) AS topen) IS NULL );\n       |CREATE TEMP FUNCTION\n       |  checkClickTime(clickTime ANY TYPE) AS ((\n       |    SELECT\n       |      MIN(tclick.time_click)\n       |    FROM\n       |      UNNEST(clickTime) AS tclick) &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR (\n       |    SELECT\n       |      MIN(tclick.time_click)\n       |    FROM\n       |      UNNEST(clickTime) AS tclick) IS NULL );\n       |SELECT\n       |  label.*,\n       |  meta.campaign_type\n       |FROM (\n       |  SELECT\n       |    \&quot;&quot;, &quot;\&quot; AS date,\n       |    channel,\n       |    user_id,\n       |    message_id,\n       |    email.campaign_id,\n       |    STRING(email.time_delivered) AS time_delivered,\n       |    # Safety for backfills\n       |    # Keeps definition of convert within 7 days of delivery\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN NULL\n       |        WHEN checkOpenTime(email.open_events) THEN (  SELECT  STRING(MIN(topen.time_open))  FROM  UNNEST(email.open_events) AS topen)\n       |        ELSE NULL END) AS first_open,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN NULL\n       |        WHEN checkOpenTime(email.open_events) THEN TIMESTAMP_DIFF((  SELECT  MIN(topen.time_open)  FROM  UNNEST(email.open_events) AS topen), email.time_delivered, HOUR)\n       |        ELSE NULL END) AS hrs_to_open,\n       |    email.optout_type,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkOpenTime(email.open_events) THEN email.opened\n       |        ELSE 0 END) AS opened,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkOpenTime(email.open_events) THEN email.cnt_open\n       |        ELSE 0 END) AS cnt_open,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkClickTime(email.click_events) THEN email.clicked\n       |        ELSE 0 END) AS clicked,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkClickTime(email.click_events) THEN email.cnt_click\n       |        ELSE 0 END) AS cnt_click,\n       |    email.unsubscribed\n       |  FROM\n       |    `users-protection.ccd.communications_health_&quot;, &quot;`\n       |  WHERE\n       |    channel = \&quot;email\&quot;\n       |    AND email.optout_type IS NOT NULL\n       |    AND LOWER(email.optout_type) NOT LIKE \&quot;%transactional%\&quot;\n       |    AND email.time_delivered &lt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*6 HOUR)\n       |    AND email.time_delivered &gt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*7 HOUR) ) label\n       |LEFT JOIN (\n       |  SELECT\n       |    id,\n       |    campaign_type\n       |  FROM\n       |    `users-protection.ucd.campaigns_&quot;, &quot;`\n       |  WHERE\n       |    # Conditional on channel is necessary, as campaign_id is not globally identifiable\n       |    channel=\&quot;email\&quot;\n       |    AND campaign_type IS NOT NULL\n       |    AND campaign_type!=\&quot;\&quot;) meta\n       |ON\n       |  label.campaign_id=meta.id\n       |&quot;).s(partition, partition, partition, partition, partition, partition, partition)).stripMargin</description><symbolName>scala.collection.immutable.StringLike.stripMargin</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>186</id><start>841</start><end>872</end><line>25</line><description>UserAggregatesJobBase.this.getBQOutputPath(args.apply(&quot;output&quot;))</description><symbolName>com.spotify.tf.UserAggregatesJobBase.getBQOutputPath</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>222</id><start>116</start><end>116</end><line>7</line><description>this.schema</description><symbolName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable.schema</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>87</id><start>5026</start><end>5035</end><line>145</line><description>x$7.user_id</description><symbolName>com.spotify.tf.InAppLabelTables.InAppLabelTable.user_id</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>96</id><start>5309</start><end>5425</end><line>153</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](scala.Predef.augmentString(com.spotify.tf.ExperimentTables.ExperimentFeaturesTable.table).format(args.apply(&quot;experiment_table&quot;)))((ClassTag.apply[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](classOf[com.spotify.tf.ExperimentTables$$ExperimentFeaturesTable]): scala.reflect.ClassTag[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]($m, {
    final class $typecreator4 extends TypeCreator {
      def &lt;init&gt;(): $typecreator4 = {
        $typecreator4.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.ExperimentTables&quot;)), $m.staticClass(&quot;com.spotify.tf.ExperimentTables.ExperimentFeaturesTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator4()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]), {
  val paramTypeclass$macro$258: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$265: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$272: com.spotify.scio.coders.Coder[Option[Double]] = coders.this.Coder.optionCoder[Double, Option](coders.this.Coder.doubleCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$273: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](55);
  parameters$macro$273.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$258), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Double]]](paramTypeclass$macro$272), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$273.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;label&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$265), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$251: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentTables&quot;, &quot;ExperimentFeaturesTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$251, false, false, parameters$macro$273, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; Return): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(makeParam.apply(parameters$macro$273.apply(0)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(1)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(3)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(6)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(10)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(11)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$273.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(21)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(22)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(23)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(26)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(29)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(33)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(34)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(35)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(38)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(41)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(45)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(46)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(47)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(50)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$273.apply(53)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$273.apply(54)).asInstanceOf[Option[Long]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(0)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p0: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(1)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p1: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(3)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p3: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(6)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p6: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(10)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p10: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(11)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p11: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$273.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(21)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p21: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(22)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p22: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(23)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p23: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(26)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p26: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(29)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p29: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(33)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p33: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(34)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p34: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(35)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p35: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(38)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p38: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(41)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p41: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(45)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p45: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(46)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p46: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(47)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p47: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(50)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p50: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$273.apply(53)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p53: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$273.apply(54)).asInstanceOf[F[Option[Long]]]).map[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p54: Option[Long]) =&gt; new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$273.length, typeName$macro$251.full);
        new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(fieldValues.apply(0).asInstanceOf[Option[String]], fieldValues.apply(1).asInstanceOf[Option[String]], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[Option[String]], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Option[Long]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Option[Long]], fieldValues.apply(11).asInstanceOf[Option[Long]], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Double]], fieldValues.apply(22).asInstanceOf[Option[Double]], fieldValues.apply(23).asInstanceOf[Option[Double]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Double]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Double]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Double]], fieldValues.apply(34).asInstanceOf[Option[Double]], fieldValues.apply(35).asInstanceOf[Option[Double]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Double]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Double]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Double]], fieldValues.apply(46).asInstanceOf[Option[Double]], fieldValues.apply(47).asInstanceOf[Option[Double]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Double]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Double]], fieldValues.apply(54).asInstanceOf[Option[Long]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQueryScioContext.typedBigQuery</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>168</id><start>561</start><end>598</end><line>19</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.PushLabelTables.PushLabelTable](sql)((ClassTag.apply[com.spotify.tf.PushLabelTables.PushLabelTable](classOf[com.spotify.tf.PushLabelTables$$PushLabelTable]): scala.reflect.ClassTag[com.spotify.tf.PushLabelTables.PushLabelTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.PushLabelTables.PushLabelTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.PushLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.PushLabelTables.PushLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.PushLabelTables.PushLabelTable]), {
  val paramTypeclass$macro$417: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$418: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  val paramTypeclass$macro$419: com.spotify.scio.coders.Coder[Float] = coders.this.Coder.floatCoder;
  val paramTypeclass$macro$420: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val paramTypeclass$macro$427: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$428: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  ();
  val parameters$macro$429: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]](13);
  parameters$macro$429.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;time_send&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Int](&quot;os_level_unsub&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$418), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Float](&quot;optout_diff&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Float]](paramTypeclass$macro$419), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;time_click&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$420), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[Long]](&quot;hrs_to_click&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$427), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, String](&quot;optout_type&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$417), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$428), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$429.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.PushLabelTables.PushLabelTable, Option[String]](&quot;campaign_type&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$420), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$416: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.PushLabelTables&quot;, &quot;PushLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.PushLabelTables.PushLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$416, false, false, parameters$macro$429, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; Return): com.spotify.tf.PushLabelTables.PushLabelTable = new com.spotify.tf.PushLabelTables.PushLabelTable(makeParam.apply(parameters$macro$429.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$429.apply(7)).asInstanceOf[Float], makeParam.apply(parameters$macro$429.apply(8)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$429.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$429.apply(10)).asInstanceOf[String], makeParam.apply(parameters$macro$429.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$429.apply(12)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.PushLabelTables.PushLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.PushLabelTables.PushLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p5: String) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$429.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p6: Int) =&gt; new mercator.Ops[F,Float](makeParam.apply(parameters$macro$429.apply(7)).asInstanceOf[F[Float]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p7: Float) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$429.apply(8)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p8: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$429.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$429.apply(10)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p10: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$429.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.PushLabelTables.PushLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$429.apply(12)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.PushLabelTables.PushLabelTable](((p12: Option[String]) =&gt; new com.spotify.tf.PushLabelTables.PushLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.PushLabelTables.PushLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$429.length, typeName$macro$416.full);
        new com.spotify.tf.PushLabelTables.PushLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Float], fieldValues.apply(8).asInstanceOf[Option[String]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[String], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQueryScioContext.typedBigQuery</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>177</id><start>679</start><end>679</end><line>23</line><description>qual$2.waitUntilDone$default$2</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>150</id><start>610</start><end>610</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$3</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>132</id><start>7371</start><end>7398</end><line>197</line><description>sampleRate.*(oversampleRate)</description><symbolName>scala.Float.*</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>159</id><start>260</start><end>273</end><line>9</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>141</id><start>319</start><end>319</end><line>12</line><description>x$1._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>105</id><start>6115</start><end>6156</end><line>169</line><description>args.optional(&quot;sample&quot;).getOrElse[String](&quot;true&quot;)</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>114</id><start>6569</start><end>6597</end><line>179</line><description>scala.StringContext.apply(&quot;labels_&quot;, &quot;_days_back&quot;).s(index)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>123</id><start>6837</start><end>6914</end><line>185</line><description>com.spotify.scio.bigquery.`package`.toBigQueryScioContext(sc).typedBigQuery[com.spotify.tf.UserAggregateTables.UserAggTable](userAggs)((ClassTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable](classOf[com.spotify.tf.UserAggregateTables$$UserAggTable]): scala.reflect.ClassTag[com.spotify.tf.UserAggregateTables.UserAggTable]), ({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable]($m, {
    final class $typecreator5 extends TypeCreator {
      def &lt;init&gt;(): $typecreator5 = {
        $typecreator5.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.UserAggregateTables&quot;)), $m.staticClass(&quot;com.spotify.tf.UserAggregateTables.UserAggTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator5()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.UserAggregateTables.UserAggTable]), {
  val paramTypeclass$macro$298: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$305: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$312: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$313: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$320: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$321: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$321.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$298), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$298), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$298), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$313), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$305), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$320), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$321.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$312), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$297: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$297, false, false, parameters$macro$321, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$321.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$321.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$321.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$321.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$321.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$321.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$321.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$321.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$321.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$321.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$321.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$321.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$321.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$321.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$321.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$321.length, typeName$macro$297.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}).keyBy[String](((k: com.spotify.tf.UserAggregateTables.UserAggTable) =&gt; k.user_id))(coders.this.Coder.tuple2Coder[String, com.spotify.tf.UserAggregateTables.UserAggTable]({
  val inst$macro$362: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder.asInstanceOf[com.spotify.scio.coders.Coder[String]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[String]](inst$macro$362)
}, {
  val inst$macro$385: com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
  val paramTypeclass$macro$366: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  val paramTypeclass$macro$373: com.spotify.scio.coders.Coder[Option[Long]] = coders.this.Coder.optionCoder[Long, Option](coders.this.Coder.longCoder);
  ();
  val paramTypeclass$macro$374: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  ();
  val paramTypeclass$macro$375: com.spotify.scio.coders.Coder[Int] = coders.this.Coder.intCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$382: com.spotify.scio.coders.Coder[Option[Float]] = coders.this.Coder.optionCoder[Float, Option](coders.this.Coder.floatCoder);
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  ();
  val parameters$macro$383: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
  parameters$macro$383.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$366), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(9, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(10, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(11, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Int]](paramTypeclass$macro$375), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(12, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(13, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(14, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(15, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(16, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(17, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(18, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(19, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(20, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(21, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(22, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(23, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(24, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(25, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(26, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(27, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(28, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(29, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(30, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(31, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(32, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(33, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(34, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(35, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(36, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(37, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(38, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(39, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(40, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(41, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(42, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(43, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(44, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(45, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(46, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(47, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(48, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(49, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(50, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(51, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(52, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Long]]](paramTypeclass$macro$373), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(53, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[Float]]](paramTypeclass$macro$382), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(54, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$383.update(55, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$374), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$365: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$365, false, false, parameters$macro$383, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$383.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$383.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$383.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$383.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$383.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$383.apply(55)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$383.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$383.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$383.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$383.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$383.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$383.length, typeName$macro$365.full);
        new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
}.asInstanceOf[com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable]];
  shapeless.Strict.apply[com.spotify.scio.coders.Coder[com.spotify.tf.UserAggregateTables.UserAggTable]](inst$macro$385)
}))</description><symbolName>com.spotify.scio.values.SCollection.keyBy</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>195</id><start>1375</start><end>1375</end><line>38</line><description>qual$1.saveAsTypedBigQuery$default$2</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>204</id><start>1420</start><end>1446</end><line>40</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>78</id><start>4515</start><end>4617</end><line>132</line><description>PushFeatureConverter.toExample(PushFeatureConverter.PushFeatures.apply(labelRow, userAggRow))</description><symbolName>com.spotify.tf.PushFeatureConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>69</id><start>4090</start><end>4090</end><line>119</line><description>qual$3.waitUntilDone$default$2</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>tupled</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>231</id><start>2268</start><end>2268</end><line>64</line><description>{
  ((date: String, channel: String, user_id: String, message_id: String, campaign_id: String, time_delivered: String, trigger: String, clicked: Long, campaign_type: Option[String]) =&gt; InAppLabelTables.this.InAppLabelTable.apply(date, channel, user_id, message_id, campaign_id, time_delivered, trigger, clicked, campaign_type))
}.tupled</description><symbolName>scala.Function9.tupled</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>90</id><start>5155</start><end>5260</end><line>148</line><description>InAppFeatureConverter.toExample(InAppFeatureConverter.InAppFeatures.apply(labelRow, userAggRow))</description><symbolName>com.spotify.tf.InAppFeatureConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>63</id><start>4034</start><end>4034</end><line>117</line><description>qual$2.saveAsTfExampleFile$default$2</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>99</id><start>5443</start><end>5443</end><line>155</line><description>coders.this.Coder.protoMessageCoder[org.tensorflow.example.Example]((ClassTag.apply[org.tensorflow.example.Example](classOf[org.tensorflow.example.Example]): scala.reflect.ClassTag[org.tensorflow.example.Example]))</description><symbolName>com.spotify.scio.coders.instances.ProtobufCoders.protoMessageCoder</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>45</id><start>3472</start><end>3493</end><line>105</line><description>args.apply(&quot;training_data&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>54</id><start>3881</start><end>3881</end><line>113</line><description>x$2._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>171</id><start>625</start><end>625</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$3</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>72</id><start>4224</start><end>4230</end><line>123</line><description>&quot;PUSH&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>81</id><start>4705</start><end>4714</end><line>137</line><description>x$5.user_id</description><symbolName>com.spotify.tf.EmailLabelTables.EmailLabelTable.user_id</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>144</id><start>446</start><end>472</end><line>17</line><description>com.spotify.tf.InAppLabelTables.inAppLabelQuery(partition)</description><symbolName>com.spotify.tf.InAppLabelTables.inAppLabelQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>126</id><start>6458</start><end>6458</end><line>176</line><description>immutable.this.List.canBuildFrom[com.spotify.scio.values.SCollection[(String, (T, Option[com.spotify.tf.UserAggregateTables.UserAggTable]))]]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>153</id><start>587</start><end>647</end><line>21</line><description>qual$1.saveAsTypedBigQuery(x$2, x$3, x$4, x$5)(({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.InAppLabelTables.InAppLabelTable]($m, {
    final class $typecreator2 extends TypeCreator {
      def &lt;init&gt;(): $typecreator2 = {
        $typecreator2.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $u.internal.reificationSupport.TypeRef($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.SingleType($u.internal.reificationSupport.thisPrefix($m.RootClass), $m.staticPackage(&quot;com&quot;)), $m.staticPackage(&quot;com.spotify&quot;)), $m.staticPackage(&quot;com.spotify.tf&quot;)), $m.staticModule(&quot;com.spotify.tf.InAppLabelTables&quot;)), $m.staticClass(&quot;com.spotify.tf.InAppLabelTables.InAppLabelTable&quot;), scala.collection.immutable.Nil)
      }
    };
    new $typecreator2()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.InAppLabelTables.InAppLabelTable]), scala.Predef.$conforms[com.spotify.tf.InAppLabelTables.InAppLabelTable], {
  val paramTypeclass$macro$410: com.spotify.scio.coders.Coder[String] = coders.this.Coder.stringCoder;
  ();
  ();
  ();
  ();
  ();
  ();
  val paramTypeclass$macro$411: com.spotify.scio.coders.Coder[Long] = coders.this.Coder.longCoder;
  val paramTypeclass$macro$412: com.spotify.scio.coders.Coder[Option[String]] = coders.this.Coder.optionCoder[String, Option](coders.this.Coder.stringCoder);
  val parameters$macro$413: Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]] = new Array[magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]](9);
  parameters$macro$413.update(0, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(1, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(2, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(3, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(4, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(5, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(6, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;trigger&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[String]](paramTypeclass$macro$410), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(7, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Long](&quot;clicked&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Long]](paramTypeclass$macro$411), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  parameters$macro$413.update(8, magnolia.Magnolia.param[com.spotify.scio.coders.Coder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[String]](&quot;campaign_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.scio.coders.Coder[Option[String]]](paramTypeclass$macro$412), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
  val typeName$macro$409: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppLabelTables&quot;, &quot;InAppLabelTable&quot;);
  coders.this.Coder.combine[com.spotify.tf.InAppLabelTables.InAppLabelTable]({
    final class $anon extends magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] {
      def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]&gt; = {
        $anon.super.&lt;init&gt;(typeName$macro$409, false, false, parameters$macro$413, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
        ()
      };
      override def construct[Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; Return): com.spotify.tf.InAppLabelTables.InAppLabelTable = new com.spotify.tf.InAppLabelTables.InAppLabelTable(makeParam.apply(parameters$macro$413.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(6)).asInstanceOf[String], makeParam.apply(parameters$macro$413.apply(7)).asInstanceOf[Long], makeParam.apply(parameters$macro$413.apply(8)).asInstanceOf[Option[String]]);
      import scala.language.higherKinds;
      def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.scio.coders.Coder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppLabelTables.InAppLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p5: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$413.apply(6)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p6: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$413.apply(7)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p7: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$413.apply(8)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p8: Option[String]) =&gt; new com.spotify.tf.InAppLabelTables.InAppLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
      def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppLabelTables.InAppLabelTable = {
        magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$413.length, typeName$macro$409.full);
        new com.spotify.tf.InAppLabelTables.InAppLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[String], fieldValues.apply(7).asInstanceOf[Long], fieldValues.apply(8).asInstanceOf[Option[String]])
      }
    };
    new $anon()
  })
})</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>162</id><start>338</start><end>338</end><line>12</line><description>x$1._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>EmailFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailFeatureConverter</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>27</id><start>1633</start><end>1664</end><line>45</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.EmailFeatureConverter.EmailFeatures](derive.this.`package`.toExampleConverter[com.spotify.tf.EmailFeatureConverter.EmailFeatures]({
  val emailfeaturesTypeclass$macro$65: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailFeatureConverter.EmailFeatures] = {
    val paramTypeclass$macro$79: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailLabelTables.EmailLabelTable] = {
      val emaillabeltableTypeclass$macro$67: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailLabelTables.EmailLabelTable] = {
        val paramTypeclass$macro$69: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$72: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        val paramTypeclass$macro$75: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$76: com.spotify.tfexample.derive.FeatureBuilder[Long] = derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$77: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]](15);
        parameters$macro$77.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;The date of email conversion process&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Channel reached - should always be email&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;{ policy: { semanticType: userId }, description: \'Id of user reached with an email\' }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Identifier of the email sent&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;first_open&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$72), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[Long]](&quot;hrs_to_open&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$75), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, String](&quot;optout_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$69), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;opened&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_open&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;clicked&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;cnt_click&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Long](&quot;unsubscribed&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$76), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$77.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailLabelTables.EmailLabelTable, Option[String]](&quot;campaign_type&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$72), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$68: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailLabelTables&quot;, &quot;EmailLabelTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.EmailLabelTables.EmailLabelTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$68, false, false, parameters$macro$77, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: Email Open Labelled Data for user protection models}&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; Return): com.spotify.tf.EmailLabelTables.EmailLabelTable = new com.spotify.tf.EmailLabelTables.EmailLabelTable(makeParam.apply(parameters$macro$77.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(6)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$77.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$77.apply(8)).asInstanceOf[String], makeParam.apply(parameters$macro$77.apply(9)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(10)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(11)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(12)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(13)).asInstanceOf[Long], makeParam.apply(parameters$macro$77.apply(14)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailLabelTables.EmailLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailLabelTables.EmailLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p5: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$77.apply(6)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p6: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$77.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$77.apply(8)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p8: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(9)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p9: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(10)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p10: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(11)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p11: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(12)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p12: Long) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$77.apply(13)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p13: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$77.apply(14)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.EmailLabelTables.EmailLabelTable](((p14: Option[String]) =&gt; new com.spotify.tf.EmailLabelTables.EmailLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailLabelTables.EmailLabelTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$77.length, typeName$macro$68.full);
              new com.spotify.tf.EmailLabelTables.EmailLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[Option[String]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[String], fieldValues.apply(9).asInstanceOf[Long], fieldValues.apply(10).asInstanceOf[Long], fieldValues.apply(11).asInstanceOf[Long], fieldValues.apply(12).asInstanceOf[Long], fieldValues.apply(13).asInstanceOf[Long], fieldValues.apply(14).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      emaillabeltableTypeclass$macro$67
    };
    val paramTypeclass$macro$91: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$80: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$82: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$83: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$84: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$85: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$88: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$89: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$89.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$82), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$82), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$82), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$85), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$83), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$88), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$89.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$84), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$81: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$81, false, false, parameters$macro$89, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$89.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$89.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$89.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$89.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$89.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$89.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$89.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$89.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$89.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$89.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$89.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$89.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$89.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$89.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$89.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$89.length, typeName$macro$81.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$80
    });
    val parameters$macro$92: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures]](2);
    parameters$macro$92.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailFeatureConverter.EmailFeatures, com.spotify.tf.EmailLabelTables.EmailLabelTable](&quot;emailLabelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.EmailLabelTables.EmailLabelTable]](paramTypeclass$macro$79), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$92.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.EmailFeatureConverter.EmailFeatures, Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$91), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$66: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.EmailFeatureConverter&quot;, &quot;EmailFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.EmailFeatureConverter.EmailFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$66, false, false, parameters$macro$92, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures] =&gt; Return): com.spotify.tf.EmailFeatureConverter.EmailFeatures = new com.spotify.tf.EmailFeatureConverter.EmailFeatures(makeParam.apply(parameters$macro$92.apply(0)).asInstanceOf[com.spotify.tf.EmailLabelTables.EmailLabelTable], makeParam.apply(parameters$macro$92.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.EmailFeatureConverter.EmailFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.EmailFeatureConverter.EmailFeatures] = new mercator.Ops[F,com.spotify.tf.EmailLabelTables.EmailLabelTable](makeParam.apply(parameters$macro$92.apply(0)).asInstanceOf[F[com.spotify.tf.EmailLabelTables.EmailLabelTable]]).flatMap[com.spotify.tf.EmailFeatureConverter.EmailFeatures](((p0: com.spotify.tf.EmailLabelTables.EmailLabelTable) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$92.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.EmailFeatureConverter.EmailFeatures](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.EmailFeatureConverter.EmailFeatures(p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.EmailFeatureConverter.EmailFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$92.length, typeName$macro$66.full);
          new com.spotify.tf.EmailFeatureConverter.EmailFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.EmailLabelTables.EmailLabelTable], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  emailfeaturesTypeclass$macro$65
}))</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>PushFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.PushFeatureConverter</fullClassName><method>toExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>36</id><start>2676</start><end>2714</end><line>77</line><description>PushFeatureConverter.this.pushExampleConverter.toExample(record)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>108</id><start>6188</start><end>6242</end><line>170</line><description>scala.Predef.augmentString(args.optional(&quot;sample-rate&quot;).getOrElse[String](&quot;0.01&quot;)).toFloat</description><symbolName>scala.collection.immutable.StringLike.toFloat</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>135</id><start>7515</start><end>7547</end><line>203</line><description>sample.unary_!.||(chance.&lt;(sampleProb))</description><symbolName>scala.Boolean.||</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>117</id><start>6626</start><end>6682</end><line>180</line><description>args.apply(scala.StringContext.apply(&quot;user-aggregations_&quot;, &quot;_days_back&quot;).s(index_days_prior))</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>18</id><start>685</start><end>685</end><line>23</line><description>qual$2.waitUntilDone$default$1</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>9</id><start>498</start><end>538</end><line>18</line><description>EmailLabelJob.this.logger.info(scala.StringContext.apply(&quot;partition = &quot;, &quot;&quot;).s(partition))</description><symbolName>org.slf4j.Logger.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>48</id><start>3565</start><end>3620</end><line>107</line><description>scala.Predef.augmentString(args.optional(&quot;split-weight&quot;).getOrElse[String](&quot;0.8&quot;)).toDouble</description><symbolName>scala.collection.immutable.StringLike.toDouble</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>57</id><start>3972</start><end>3972</end><line>116</line><description>qual$1.saveAsTfExampleFile$default$2</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>21</id><start>674</start><end>700</end><line>23</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>3</id><start>336</start><end>336</end><line>12</line><description>x$1._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>84</id><start>4833</start><end>4938</end><line>140</line><description>EmailFeatureConverter.toExample(EmailFeatureConverter.EmailFeatures.apply(labelRow, userAggRow))</description><symbolName>com.spotify.tf.EmailFeatureConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>12</id><start>631</start><end>631</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$2</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>93</id><start>5362</start><end>5391</end><line>154</line><description>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable.table</description><symbolName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable.table</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>102</id><start>5990</start><end>6037</end><line>167</line><description>scala.Predef.augmentString(args.optional(&quot;days-back&quot;).getOrElse[String](&quot;7&quot;)).toInt</description><symbolName>scala.collection.immutable.StringLike.toInt</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>matchChannel</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>75</id><start>4386</start><end>4395</end><line>129</line><description>x$3.user_id</description><symbolName>com.spotify.tf.PushLabelTables.PushLabelTable.user_id</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>InAppFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppFeatureConverter</fullClassName><method>&lt;none&gt;</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>30</id><start>2131</start><end>2131</end><line>59</line><description>derive.this.`package`.toExampleConverter[com.spotify.tf.InAppFeatureConverter.InAppFeatures]({
  val inappfeaturesTypeclass$macro$94: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppFeatureConverter.InAppFeatures] = {
    val paramTypeclass$macro$105: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppLabelTables.InAppLabelTable] = {
      val inapplabeltableTypeclass$macro$96: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppLabelTables.InAppLabelTable] = {
        val paramTypeclass$macro$98: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$99: com.spotify.tfexample.derive.FeatureBuilder[Long] = derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping);
        val paramTypeclass$macro$102: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        val parameters$macro$103: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]](9);
        parameters$macro$103.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;date&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;The date of email conversion process&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;channel&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Channel reached - should always be email&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;user_id&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;{ policy: { semanticType: userId }, description: \'Id of user reached with an email\' }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;message_id&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any](new com.spotify.scio.bigquery.types.description(&quot;Identifier of the email sent&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;campaign_id&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;time_delivered&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, String](&quot;trigger&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$98), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Long](&quot;clicked&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Long]](paramTypeclass$macro$99), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$103.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppLabelTables.InAppLabelTable, Option[String]](&quot;campaign_type&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$102), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$97: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppLabelTables&quot;, &quot;InAppLabelTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.InAppLabelTables.InAppLabelTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$97, false, false, parameters$macro$103, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: Email Open Labelled Data for user protection models}&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; Return): com.spotify.tf.InAppLabelTables.InAppLabelTable = new com.spotify.tf.InAppLabelTables.InAppLabelTable(makeParam.apply(parameters$macro$103.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(2)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(4)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(5)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(6)).asInstanceOf[String], makeParam.apply(parameters$macro$103.apply(7)).asInstanceOf[Long], makeParam.apply(parameters$macro$103.apply(8)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppLabelTables.InAppLabelTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppLabelTables.InAppLabelTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p1: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(2)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p2: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p3: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(4)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p4: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(5)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p5: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$103.apply(6)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p6: String) =&gt; new mercator.Ops[F,Long](makeParam.apply(parameters$macro$103.apply(7)).asInstanceOf[F[Long]]).flatMap[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p7: Long) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$103.apply(8)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.InAppLabelTables.InAppLabelTable](((p8: Option[String]) =&gt; new com.spotify.tf.InAppLabelTables.InAppLabelTable(p0, p1, p2, p3, p4, p5, p6, p7, p8)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppLabelTables.InAppLabelTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$103.length, typeName$macro$97.full);
              new com.spotify.tf.InAppLabelTables.InAppLabelTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[String], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[String], fieldValues.apply(5).asInstanceOf[String], fieldValues.apply(6).asInstanceOf[String], fieldValues.apply(7).asInstanceOf[Long], fieldValues.apply(8).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      inapplabeltableTypeclass$macro$96
    };
    val paramTypeclass$macro$119: com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]] = derive.this.`package`.optionFb[com.spotify.tf.UserAggregateTables.UserAggTable]({
      val useraggtableTypeclass$macro$106: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.UserAggregateTables.UserAggTable] = {
        val paramTypeclass$macro$108: com.spotify.tfexample.derive.FeatureBuilder[String] = derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping);
        ();
        val paramTypeclass$macro$111: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        val paramTypeclass$macro$112: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$113: com.spotify.tfexample.derive.FeatureBuilder[Int] = derive.this.`package`.singletonFeatureBuilder[Int](derive.this.`package`.intTensorflowMapping);
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$116: com.spotify.tfexample.derive.FeatureBuilder[Option[Float]] = derive.this.`package`.optionFb[Float](derive.this.`package`.singletonFeatureBuilder[Float](derive.this.`package`.floatTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$117: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]](56);
        parameters$macro$117.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$108), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$108), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, String](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[String]](paramTypeclass$macro$108), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Int](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Int]](paramTypeclass$macro$113), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$111), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[Float]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Float]]](paramTypeclass$macro$116), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;reporting_age_bucket&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$117.update(55, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.UserAggregateTables.UserAggTable, Option[String]](&quot;gender&quot;, 55, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$112), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$107: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.UserAggregateTables&quot;, &quot;UserAggTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.UserAggregateTables.UserAggTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$107, false, false, parameters$macro$117, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag(), new com.spotify.scio.bigquery.types.description(&quot;{description: \'User Aggregate Measures Data for user protection models  }&quot;))((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; Return): com.spotify.tf.UserAggregateTables.UserAggTable = new com.spotify.tf.UserAggregateTables.UserAggTable(makeParam.apply(parameters$macro$117.apply(0)).asInstanceOf[String], makeParam.apply(parameters$macro$117.apply(1)).asInstanceOf[String], makeParam.apply(parameters$macro$117.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(3)).asInstanceOf[String], makeParam.apply(parameters$macro$117.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(6)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(7)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(10)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(11)).asInstanceOf[Int], makeParam.apply(parameters$macro$117.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(21)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(22)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(23)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(26)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(29)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(33)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(34)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(35)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(38)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(41)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(45)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(46)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(47)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(50)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$117.apply(53)).asInstanceOf[Option[Float]], makeParam.apply(parameters$macro$117.apply(54)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$117.apply(55)).asInstanceOf[Option[String]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.UserAggregateTables.UserAggTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.UserAggregateTables.UserAggTable] = new mercator.Ops[F,String](makeParam.apply(parameters$macro$117.apply(0)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p0: String) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$117.apply(1)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p1: String) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,String](makeParam.apply(parameters$macro$117.apply(3)).asInstanceOf[F[String]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p3: String) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(6)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p6: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(7)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p7: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(10)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p10: Int) =&gt; new mercator.Ops[F,Int](makeParam.apply(parameters$macro$117.apply(11)).asInstanceOf[F[Int]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p11: Int) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(21)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p21: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(22)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p22: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(23)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p23: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(26)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p26: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(29)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p29: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(33)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p33: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(34)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p34: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(35)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p35: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(38)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p38: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(41)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p41: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(45)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p45: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(46)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p46: Option[Float]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(47)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p47: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(50)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p50: Option[Float]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$117.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Float]](makeParam.apply(parameters$macro$117.apply(53)).asInstanceOf[F[Option[Float]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p53: Option[Float]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(54)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.UserAggregateTables.UserAggTable](((p54: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$117.apply(55)).asInstanceOf[F[Option[String]]]).map[com.spotify.tf.UserAggregateTables.UserAggTable](((p55: Option[String]) =&gt; new com.spotify.tf.UserAggregateTables.UserAggTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54, p55)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.UserAggregateTables.UserAggTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$117.length, typeName$macro$107.full);
              new com.spotify.tf.UserAggregateTables.UserAggTable(fieldValues.apply(0).asInstanceOf[String], fieldValues.apply(1).asInstanceOf[String], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[String], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Int], fieldValues.apply(7).asInstanceOf[Int], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Int], fieldValues.apply(11).asInstanceOf[Int], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Float]], fieldValues.apply(22).asInstanceOf[Option[Float]], fieldValues.apply(23).asInstanceOf[Option[Float]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Float]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Float]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Float]], fieldValues.apply(34).asInstanceOf[Option[Float]], fieldValues.apply(35).asInstanceOf[Option[Float]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Float]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Float]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Float]], fieldValues.apply(46).asInstanceOf[Option[Float]], fieldValues.apply(47).asInstanceOf[Option[Float]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Float]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Float]], fieldValues.apply(54).asInstanceOf[Option[String]], fieldValues.apply(55).asInstanceOf[Option[String]])
            }
          };
          new $anon()
        })
      };
      useraggtableTypeclass$macro$106
    });
    val parameters$macro$120: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures]](2);
    parameters$macro$120.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppFeatureConverter.InAppFeatures, com.spotify.tf.InAppLabelTables.InAppLabelTable](&quot;InAppLabelTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.InAppLabelTables.InAppLabelTable]](paramTypeclass$macro$105), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    parameters$macro$120.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.InAppFeatureConverter.InAppFeatures, Option[com.spotify.tf.UserAggregateTables.UserAggTable]](&quot;userAggTable&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]](paramTypeclass$macro$119), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$95: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.InAppFeatureConverter&quot;, &quot;InAppFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.InAppFeatureConverter.InAppFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$95, false, false, parameters$macro$120, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures] =&gt; Return): com.spotify.tf.InAppFeatureConverter.InAppFeatures = new com.spotify.tf.InAppFeatureConverter.InAppFeatures(makeParam.apply(parameters$macro$120.apply(0)).asInstanceOf[com.spotify.tf.InAppLabelTables.InAppLabelTable], makeParam.apply(parameters$macro$120.apply(1)).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.InAppFeatureConverter.InAppFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.InAppFeatureConverter.InAppFeatures] = new mercator.Ops[F,com.spotify.tf.InAppLabelTables.InAppLabelTable](makeParam.apply(parameters$macro$120.apply(0)).asInstanceOf[F[com.spotify.tf.InAppLabelTables.InAppLabelTable]]).flatMap[com.spotify.tf.InAppFeatureConverter.InAppFeatures](((p0: com.spotify.tf.InAppLabelTables.InAppLabelTable) =&gt; new mercator.Ops[F,Option[com.spotify.tf.UserAggregateTables.UserAggTable]](makeParam.apply(parameters$macro$120.apply(1)).asInstanceOf[F[Option[com.spotify.tf.UserAggregateTables.UserAggTable]]]).map[com.spotify.tf.InAppFeatureConverter.InAppFeatures](((p1: Option[com.spotify.tf.UserAggregateTables.UserAggTable]) =&gt; new com.spotify.tf.InAppFeatureConverter.InAppFeatures(p0, p1)))(monadic)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.InAppFeatureConverter.InAppFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$120.length, typeName$macro$95.full);
          new com.spotify.tf.InAppFeatureConverter.InAppFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.InAppLabelTables.InAppLabelTable], fieldValues.apply(1).asInstanceOf[Option[com.spotify.tf.UserAggregateTables.UserAggTable]])
        }
      };
      new $anon()
    })
  };
  inappfeaturesTypeclass$macro$94
})</description><symbolName>com.spotify.tfexample.derive.Implicits.toExampleConverter</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ExperimentFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentFeatureConverter</fullClassName><method>exampleConverter</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>39</id><start>3024</start><end>3060</end><line>89</line><description>com.spotify.tfexample.derive.ExampleConverter.apply[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures](derive.this.`package`.toExampleConverter[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]({
  val experimentfeaturesTypeclass$macro$153: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] = {
    val paramTypeclass$macro$168: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = {
      val experimentfeaturestableTypeclass$macro$155: com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = {
        val paramTypeclass$macro$159: com.spotify.tfexample.derive.FeatureBuilder[Option[String]] = derive.this.`package`.optionFb[String](derive.this.`package`.singletonFeatureBuilder[String](derive.this.`package`.stringTensorflowMapping));
        ();
        val paramTypeclass$macro$162: com.spotify.tfexample.derive.FeatureBuilder[Option[Long]] = derive.this.`package`.optionFb[Long](derive.this.`package`.singletonFeatureBuilder[Long](derive.this.`package`.longTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val paramTypeclass$macro$165: com.spotify.tfexample.derive.FeatureBuilder[Option[Double]] = derive.this.`package`.optionFb[Double](derive.this.`package`.singletonFeatureBuilder[Double](derive.this.`package`.doubleTensorflowMapping));
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        ();
        val parameters$macro$166: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](55);
        parameters$macro$166.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;user_id&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(1, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;country_code&quot;, 1, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(2, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;dsr&quot;, 2, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(3, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;dsr_bucket&quot;, 3, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(4, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;first_platform&quot;, 4, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(5, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;primary_platform&quot;, 5, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(6, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;has_streamed_ever&quot;, 6, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(7, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;registered_today&quot;, 7, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(8, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_mau&quot;, 8, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(9, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;days_since_last_dau&quot;, 9, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(10, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_dau&quot;, 10, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(11, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;is_mau&quot;, 11, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(12, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_day&quot;, 12, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(13, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_day&quot;, 13, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(14, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;ms_played_month&quot;, 14, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(15, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_streams_month&quot;, 15, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(16, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_type&quot;, 16, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(17, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[String]](&quot;product_category&quot;, 17, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[String]]](paramTypeclass$macro$159), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(18, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_yesterday&quot;, 18, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(19, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_yesterday&quot;, 19, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(20, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_yesterday&quot;, 20, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(21, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_yesterday&quot;, 21, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(22, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_yesterday&quot;, 22, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(23, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_yesterday&quot;, 23, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(24, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_yesterday&quot;, 24, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(25, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_yesterday&quot;, 25, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(26, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_yesterday&quot;, 26, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(27, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_yesterday&quot;, 27, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(28, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_yesterday&quot;, 28, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(29, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_yesterday&quot;, 29, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(30, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_week&quot;, 30, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(31, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_week&quot;, 31, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(32, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_week&quot;, 32, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(33, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_week&quot;, 33, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(34, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_week&quot;, 34, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(35, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_week&quot;, 35, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(36, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_week&quot;, 36, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(37, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_week&quot;, 37, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(38, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_week&quot;, 38, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(39, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_week&quot;, 39, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(40, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_week&quot;, 40, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(41, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_week&quot;, 41, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(42, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_month&quot;, 42, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(43, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_open_month&quot;, 43, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(44, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_email_click_month&quot;, 44, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(45, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_open_rate_month&quot;, 45, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(46, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_deliver_rate_month&quot;, 46, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(47, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;email_click_open_rate_month&quot;, 47, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(48, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_month&quot;, 48, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(49, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_push_click_month&quot;, 49, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(50, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;push_click_rate_month&quot;, 50, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(51, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_month&quot;, 51, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(52, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;num_in_app_click_month&quot;, 52, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(53, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Double]](&quot;in_app_click_rate_month&quot;, 53, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Double]]](paramTypeclass$macro$165), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        parameters$macro$166.update(54, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable, Option[Long]](&quot;label&quot;, 54, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[Option[Long]]](paramTypeclass$macro$162), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
        val typeName$macro$156: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentTables&quot;, &quot;ExperimentFeaturesTable&quot;);
        derive.this.FeatureBuilder.combine[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]({
          final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] {
            def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]&gt; = {
              $anon.super.&lt;init&gt;(typeName$macro$156, false, false, parameters$macro$166, scala.Array.apply[Any](new com.spotify.scio.bigquery.types.BigQueryTag())((ClassTag.Any: scala.reflect.ClassTag[Any])));
              ()
            };
            override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; Return): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(makeParam.apply(parameters$macro$166.apply(0)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(1)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(2)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(3)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(4)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(5)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(6)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(7)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(8)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(9)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(10)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(11)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(12)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(13)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(14)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(15)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(16)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(17)).asInstanceOf[Option[String]], makeParam.apply(parameters$macro$166.apply(18)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(19)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(20)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(21)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(22)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(23)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(24)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(25)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(26)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(27)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(28)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(29)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(30)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(31)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(32)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(33)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(34)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(35)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(36)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(37)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(38)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(39)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(40)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(41)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(42)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(43)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(44)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(45)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(46)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(47)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(48)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(49)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(50)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(51)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(52)).asInstanceOf[Option[Long]], makeParam.apply(parameters$macro$166.apply(53)).asInstanceOf[Option[Double]], makeParam.apply(parameters$macro$166.apply(54)).asInstanceOf[Option[Long]]);
            import scala.language.higherKinds;
            def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable] = new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(0)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p0: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(1)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p1: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(2)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p2: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(3)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p3: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(4)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p4: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(5)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p5: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(6)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p6: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(7)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p7: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(8)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p8: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(9)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p9: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(10)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p10: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(11)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p11: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(12)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p12: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(13)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p13: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(14)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p14: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(15)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p15: Option[Long]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(16)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p16: Option[String]) =&gt; new mercator.Ops[F,Option[String]](makeParam.apply(parameters$macro$166.apply(17)).asInstanceOf[F[Option[String]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p17: Option[String]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(18)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p18: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(19)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p19: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(20)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p20: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(21)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p21: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(22)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p22: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(23)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p23: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(24)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p24: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(25)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p25: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(26)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p26: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(27)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p27: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(28)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p28: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(29)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p29: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(30)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p30: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(31)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p31: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(32)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p32: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(33)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p33: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(34)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p34: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(35)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p35: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(36)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p36: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(37)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p37: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(38)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p38: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(39)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p39: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(40)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p40: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(41)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p41: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(42)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p42: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(43)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p43: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(44)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p44: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(45)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p45: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(46)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p46: Option[Double]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(47)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p47: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(48)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p48: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(49)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p49: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(50)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p50: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(51)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p51: Option[Long]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(52)).asInstanceOf[F[Option[Long]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p52: Option[Long]) =&gt; new mercator.Ops[F,Option[Double]](makeParam.apply(parameters$macro$166.apply(53)).asInstanceOf[F[Option[Double]]]).flatMap[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p53: Option[Double]) =&gt; new mercator.Ops[F,Option[Long]](makeParam.apply(parameters$macro$166.apply(54)).asInstanceOf[F[Option[Long]]]).map[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](((p54: Option[Long]) =&gt; new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48, p49, p50, p51, p52, p53, p54)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic)))(monadic);
            def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentTables.ExperimentFeaturesTable = {
              magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$166.length, typeName$macro$156.full);
              new com.spotify.tf.ExperimentTables.ExperimentFeaturesTable(fieldValues.apply(0).asInstanceOf[Option[String]], fieldValues.apply(1).asInstanceOf[Option[String]], fieldValues.apply(2).asInstanceOf[Option[Long]], fieldValues.apply(3).asInstanceOf[Option[String]], fieldValues.apply(4).asInstanceOf[Option[String]], fieldValues.apply(5).asInstanceOf[Option[String]], fieldValues.apply(6).asInstanceOf[Option[Long]], fieldValues.apply(7).asInstanceOf[Option[Long]], fieldValues.apply(8).asInstanceOf[Option[Long]], fieldValues.apply(9).asInstanceOf[Option[Long]], fieldValues.apply(10).asInstanceOf[Option[Long]], fieldValues.apply(11).asInstanceOf[Option[Long]], fieldValues.apply(12).asInstanceOf[Option[Long]], fieldValues.apply(13).asInstanceOf[Option[Long]], fieldValues.apply(14).asInstanceOf[Option[Long]], fieldValues.apply(15).asInstanceOf[Option[Long]], fieldValues.apply(16).asInstanceOf[Option[String]], fieldValues.apply(17).asInstanceOf[Option[String]], fieldValues.apply(18).asInstanceOf[Option[Long]], fieldValues.apply(19).asInstanceOf[Option[Long]], fieldValues.apply(20).asInstanceOf[Option[Long]], fieldValues.apply(21).asInstanceOf[Option[Double]], fieldValues.apply(22).asInstanceOf[Option[Double]], fieldValues.apply(23).asInstanceOf[Option[Double]], fieldValues.apply(24).asInstanceOf[Option[Long]], fieldValues.apply(25).asInstanceOf[Option[Long]], fieldValues.apply(26).asInstanceOf[Option[Double]], fieldValues.apply(27).asInstanceOf[Option[Long]], fieldValues.apply(28).asInstanceOf[Option[Long]], fieldValues.apply(29).asInstanceOf[Option[Double]], fieldValues.apply(30).asInstanceOf[Option[Long]], fieldValues.apply(31).asInstanceOf[Option[Long]], fieldValues.apply(32).asInstanceOf[Option[Long]], fieldValues.apply(33).asInstanceOf[Option[Double]], fieldValues.apply(34).asInstanceOf[Option[Double]], fieldValues.apply(35).asInstanceOf[Option[Double]], fieldValues.apply(36).asInstanceOf[Option[Long]], fieldValues.apply(37).asInstanceOf[Option[Long]], fieldValues.apply(38).asInstanceOf[Option[Double]], fieldValues.apply(39).asInstanceOf[Option[Long]], fieldValues.apply(40).asInstanceOf[Option[Long]], fieldValues.apply(41).asInstanceOf[Option[Double]], fieldValues.apply(42).asInstanceOf[Option[Long]], fieldValues.apply(43).asInstanceOf[Option[Long]], fieldValues.apply(44).asInstanceOf[Option[Long]], fieldValues.apply(45).asInstanceOf[Option[Double]], fieldValues.apply(46).asInstanceOf[Option[Double]], fieldValues.apply(47).asInstanceOf[Option[Double]], fieldValues.apply(48).asInstanceOf[Option[Long]], fieldValues.apply(49).asInstanceOf[Option[Long]], fieldValues.apply(50).asInstanceOf[Option[Double]], fieldValues.apply(51).asInstanceOf[Option[Long]], fieldValues.apply(52).asInstanceOf[Option[Long]], fieldValues.apply(53).asInstanceOf[Option[Double]], fieldValues.apply(54).asInstanceOf[Option[Long]])
            }
          };
          new $anon()
        })
      };
      experimentfeaturestableTypeclass$macro$155
    };
    val parameters$macro$169: Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]] = new Array[magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]](1);
    parameters$macro$169.update(0, magnolia.Magnolia.param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass, com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures, com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](&quot;featureTable&quot;, 0, false, magnolia.CallByNeed.apply[com.spotify.tfexample.derive.FeatureBuilder[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]](paramTypeclass$macro$168), magnolia.CallByNeed.apply[None.type](scala.None), scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any]))));
    val typeName$macro$154: magnolia.TypeName = magnolia.TypeName.apply(&quot;com.spotify.tf.ExperimentFeatureConverter&quot;, &quot;ExperimentFeatures&quot;);
    derive.this.FeatureBuilder.combine[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]({
      final class $anon extends magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] {
        def &lt;init&gt;(): &lt;$anon: magnolia.CaseClass[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures]&gt; = {
          $anon.super.&lt;init&gt;(typeName$macro$154, false, false, parameters$macro$169, scala.Array.apply[Any]()((ClassTag.Any: scala.reflect.ClassTag[Any])));
          ()
        };
        override def construct[Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] =&gt; Return): com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures = new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(makeParam.apply(parameters$macro$169.apply(0)).asInstanceOf[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]);
        import scala.language.higherKinds;
        def constructMonadic[F[_] &gt;: [_]Nothing &lt;: [_]Any, Return](makeParam: magnolia.Param[com.spotify.tfexample.derive.FeatureBuilder.Typeclass,com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] =&gt; F[Return])(implicit monadic: mercator.Monadic[F]): F[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures] = new mercator.Ops[F,com.spotify.tf.ExperimentTables.ExperimentFeaturesTable](makeParam.apply(parameters$macro$169.apply(0)).asInstanceOf[F[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable]]).map[com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures](((p0: com.spotify.tf.ExperimentTables.ExperimentFeaturesTable) =&gt; new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(p0)))(monadic);
        def rawConstruct(fieldValues: Seq[Any]): com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures = {
          magnolia.Magnolia.checkParamLengths(fieldValues, parameters$macro$169.length, typeName$macro$154.full);
          new com.spotify.tf.ExperimentFeatureConverter.ExperimentFeatures(fieldValues.apply(0).asInstanceOf[com.spotify.tf.ExperimentTables.ExperimentFeaturesTable])
        }
      };
      new $anon()
    })
  };
  experimentfeaturesTypeclass$macro$153
}))</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>getDataset</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>111</id><start>6419</start><end>6420</end><line>175</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>66</id><start>4020</start><end>4073</end><line>117</line><description>qual$2.saveAsTfExampleFile(x$14, x$15, x$16, x$17)</description><symbolName>com.spotify.scio.tensorflow.TFExampleSCollectionFunctions.saveAsTfExampleFile</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>15</id><start>650</start><end>650</end><line>21</line><description>scala.Predef.$conforms[com.spotify.tf.EmailLabelTables.EmailLabelTable]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>tupled</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>230</id><start>2268</start><end>2268</end><line>64</line><description>InAppLabelTables.this.InAppLabelTable.apply(date, channel, user_id, message_id, campaign_id, time_delivered, trigger, clicked, campaign_type)</description><symbolName>com.spotify.tf.InAppLabelTables.InAppLabelTable.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>42</id><start>3369</start><end>3369</end><line>103</line><description>x$1._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>FeatureToTfRecord</class><classType>Object</classType><fullClassName>com.spotify.tf.FeatureToTfRecord</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>51</id><start>3734</start><end>3755</end><line>110</line><description>channel.toUpperCase()</description><symbolName>java.lang.String.toUpperCase</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>ChannelFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.ChannelFeatureConverter</fullClassName><method>toExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>24</id><start>1202</start><end>1236</end><line>33</line><description>ChannelFeatureConverter.this.exampleConverter[T](evidence$2).toExample(record)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.toExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</source><package>com.spotify.tf</package><class>InAppFeatureConverter</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppFeatureConverter</fullClassName><method>fromExample</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/FeatureToTfRecord.scala</path><id>33</id><start>2303</start><end>2340</end><line>65</line><description>InAppFeatureConverter.this.inAppExampleConverter.fromExample(ex)</description><symbolName>com.spotify.tfexample.derive.ExampleConverter.fromExample</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</source><package>com.spotify.tf</package><class>EmailLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/EmailLabelJob.scala</path><id>6</id><start>437</start><end>451</end><line>15</line><description>args.apply(&quot;output&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggTable</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables.UserAggTable</fullClassName><method>schema</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>248</id><start>6364</start><end>6364</end><line>125</line><description>com.spotify.scio.bigquery.types.BigQueryType.schemaOf[com.spotify.tf.UserAggregateTables.UserAggTable](({
  val $u: reflect.runtime.universe.type = scala.reflect.runtime.`package`.universe;
  val $m: $u.Mirror = scala.reflect.runtime.`package`.universe.runtimeMirror(this.getClass().getClassLoader());
  $u.TypeTag.apply[com.spotify.tf.UserAggregateTables.UserAggTable]($m, {
    final class $typecreator1 extends TypeCreator {
      def &lt;init&gt;(): $typecreator1 = {
        $typecreator1.super.&lt;init&gt;();
        ()
      };
      def apply[U &lt;: scala.reflect.api.Universe with Singleton]($m$untyped: scala.reflect.api.Mirror[U]): U#Type = {
        val $u: U = $m$untyped.universe;
        val $m: $u.Mirror = $m$untyped.asInstanceOf[$u.Mirror];
        $m.staticClass(&quot;com.spotify.tf.UserAggregateTables.UserAggTable&quot;).asType.toTypeConstructor
      }
    };
    new $typecreator1()
  })
}: reflect.runtime.universe.TypeTag[com.spotify.tf.UserAggregateTables.UserAggTable]))</description><symbolName>com.spotify.scio.bigquery.types.BigQueryType.schemaOf</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>schema</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>221</id><start>116</start><end>116</end><line>7</line><description>com.spotify.scio.bigquery.BigQueryUtil.parseSchema(&quot;{\&quot;fields\&quot;:[{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;user_id\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;country_code\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;dsr\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;dsr_bucket\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;first_platform\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;primary_platform\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;has_streamed_ever\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;registered_today\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;days_since_last_mau\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;days_since_last_dau\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;is_dau\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;is_mau\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;ms_played_day\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_streams_day\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;ms_played_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_streams_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;product_type\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;product_category\&quot;,\&quot;type\&quot;:\&quot;STRING\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_open_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_click_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_open_rate_yesterday\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_click_deliver_rate_yesterday\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_click_open_rate_yesterday\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_push_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_push_click_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;push_click_rate_yesterday\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_in_app_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_in_app_click_yesterday\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;in_app_click_rate_yesterday\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_open_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_click_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_open_rate_week\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_click_deliver_rate_week\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_click_open_rate_week\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_push_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_push_click_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;push_click_rate_week\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_in_app_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_in_app_click_week\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;in_app_click_rate_week\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_open_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_email_click_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_open_rate_month\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_click_deliver_rate_month\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;email_click_open_rate_month\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_push_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_push_click_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;push_click_rate_month\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_in_app_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;num_in_app_click_month\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;in_app_click_rate_month\&quot;,\&quot;type\&quot;:\&quot;FLOAT\&quot;},{\&quot;mode\&quot;:\&quot;NULLABLE\&quot;,\&quot;name\&quot;:\&quot;label\&quot;,\&quot;type\&quot;:\&quot;INTEGER\&quot;}]}&quot;)</description><symbolName>com.spotify.scio.bigquery.BigQueryUtil.parseSchema</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>203</id><start>1420</start><end>1446</end><line>40</line><description>qual$2.waitUntilDone(x$6, x$7)</description><symbolName>com.spotify.scio.ScioResult.waitUntilDone</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTables</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables</fullClassName><method>emailLabelQuery</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>212</id><start>292</start><end>3827</end><line>11</line><description>scala.StringContext.apply(&quot;\n       |#standardSQL\n       |  # Functions to Make sure that the open happened in the correct time period\n       |CREATE TEMP FUNCTION\n       |  checkOpenTime(openTime ANY TYPE) AS ((\n       |    SELECT\n       |      MIN(topen.time_open)\n       |    FROM\n       |      UNNEST(openTime) AS topen) &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR (\n       |    SELECT\n       |      MIN(topen.time_open)\n       |    FROM\n       |      UNNEST(openTime) AS topen) IS NULL );\n       |CREATE TEMP FUNCTION\n       |  checkClickTime(clickTime ANY TYPE) AS ((\n       |    SELECT\n       |      MIN(tclick.time_click)\n       |    FROM\n       |      UNNEST(clickTime) AS tclick) &lt;= PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;)\n       |    OR (\n       |    SELECT\n       |      MIN(tclick.time_click)\n       |    FROM\n       |      UNNEST(clickTime) AS tclick) IS NULL );\n       |SELECT\n       |  label.*,\n       |  meta.campaign_type\n       |FROM (\n       |  SELECT\n       |    \&quot;&quot;, &quot;\&quot; AS date,\n       |    channel,\n       |    user_id,\n       |    message_id,\n       |    email.campaign_id,\n       |    STRING(email.time_delivered) AS time_delivered,\n       |    # Safety for backfills\n       |    # Keeps definition of convert within 7 days of delivery\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN NULL\n       |        WHEN checkOpenTime(email.open_events) THEN (  SELECT  STRING(MIN(topen.time_open))  FROM  UNNEST(email.open_events) AS topen)\n       |        ELSE NULL END) AS first_open,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN NULL\n       |        WHEN checkOpenTime(email.open_events) THEN TIMESTAMP_DIFF((  SELECT  MIN(topen.time_open)  FROM  UNNEST(email.open_events) AS topen), email.time_delivered, HOUR)\n       |        ELSE NULL END) AS hrs_to_open,\n       |    email.optout_type,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkOpenTime(email.open_events) THEN email.opened\n       |        ELSE 0 END) AS opened,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkOpenTime(email.open_events) THEN email.cnt_open\n       |        ELSE 0 END) AS cnt_open,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkClickTime(email.click_events) THEN email.clicked\n       |        ELSE 0 END) AS clicked,\n       |    (CASE\n       |        WHEN email.unsubscribed = 1 THEN 0\n       |        WHEN checkClickTime(email.click_events) THEN email.cnt_click\n       |        ELSE 0 END) AS cnt_click,\n       |    email.unsubscribed\n       |  FROM\n       |    `users-protection.ccd.communications_health_&quot;, &quot;`\n       |  WHERE\n       |    channel = \&quot;email\&quot;\n       |    AND email.optout_type IS NOT NULL\n       |    AND LOWER(email.optout_type) NOT LIKE \&quot;%transactional%\&quot;\n       |    AND email.time_delivered &lt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*6 HOUR)\n       |    AND email.time_delivered &gt;= TIMESTAMP_SUB(PARSE_TIMESTAMP(\&quot;%Y%m%d\&quot;, \&quot;&quot;, &quot;\&quot;), INTERVAL 24*7 HOUR) ) label\n       |LEFT JOIN (\n       |  SELECT\n       |    id,\n       |    campaign_type\n       |  FROM\n       |    `users-protection.ucd.campaigns_&quot;, &quot;`\n       |  WHERE\n       |    # Conditional on channel is necessary, as campaign_id is not globally identifiable\n       |    channel=\&quot;email\&quot;\n       |    AND campaign_type IS NOT NULL\n       |    AND campaign_type!=\&quot;\&quot;) meta\n       |ON\n       |  label.campaign_id=meta.id\n       |&quot;).s(partition, partition, partition, partition, partition, partition, partition)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>tupled</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>239</id><start>2429</start><end>2429</end><line>66</line><description>PushLabelTables.this.PushLabelTable.apply(date, channel, user_id, message_id, campaign_id, time_send, os_level_unsub, optout_diff, time_click, hrs_to_click, optout_type, clicked, campaign_type)</description><symbolName>com.spotify.tf.PushLabelTables.PushLabelTable.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>152</id><start>629</start><end>629</end><line>21</line><description>scala.Predef.$conforms[com.spotify.tf.InAppLabelTables.InAppLabelTable]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>179</id><start>668</start><end>694</end><line>23</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>188</id><start>909</start><end>965</end><line>27</line><description>org.apache.beam.sdk.io.gcp.bigquery.BigQueryHelpers.parseTableSpec(args.apply(&quot;usersTableToJoin&quot;))</description><symbolName>org.apache.beam.sdk.io.gcp.bigquery.BigQueryHelpers.parseTableSpec</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</source><package>com.spotify.tf</package><class>InAppLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/InAppLabelJob.scala</path><id>143</id><start>416</start><end>430</end><line>15</line><description>args.apply(&quot;output&quot;)</description><symbolName>com.spotify.scio.Args.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>170</id><start>625</start><end>625</end><line>21</line><description>qual$1.saveAsTypedBigQuery$default$2</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</source><package>com.spotify.tf</package><class>EmailLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.EmailLabelTables.EmailLabelTable</fullClassName><method>tupled</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/EmailLabelTables.scala</path><id>215</id><start>3848</start><end>3848</end><line>99</line><description>{
  ((date: String, channel: String, user_id: String, message_id: String, campaign_id: String, time_delivered: String, first_open: Option[String], hrs_to_open: Option[Long], optout_type: String, opened: Long, cnt_open: Long, clicked: Long, cnt_click: Long, unsubscribed: Long, campaign_type: Option[String]) =&gt; EmailLabelTables.this.EmailLabelTable.apply(date, channel, user_id, message_id, campaign_id, time_delivered, first_open, hrs_to_open, optout_type, opened, cnt_open, clicked, cnt_click, unsubscribed, campaign_type))
}.tupled</description><symbolName>scala.Function15.tupled</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</source><package>com.spotify.tf</package><class>PushLabelJob</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelJob</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/PushLabelJob.scala</path><id>161</id><start>334</start><end>334</end><line>12</line><description>x$1._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</source><package>com.spotify.tf</package><class>PushLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.PushLabelTables.PushLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/PushLabelTables.scala</path><id>242</id><start>2429</start><end>2429</end><line>66</line><description>this.schema</description><symbolName>com.spotify.tf.PushLabelTables.PushLabelTable.schema</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</source><package>com.spotify.tf</package><class>UserAggTable</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregateTables.UserAggTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/UserAggregateTables.scala</path><id>251</id><start>6364</start><end>6364</end><line>125</line><description>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString(this.schema, &quot;UserAggTable&quot;, indent)</description><symbolName>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</source><package>com.spotify.tf</package><class>ExperimentFeaturesTable</class><classType>Object</classType><fullClassName>com.spotify.tf.ExperimentTables.ExperimentFeaturesTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/ExperimentTables.scala</path><id>224</id><start>116</start><end>116</end><line>7</line><description>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString(this.schema, &quot;ExperimentFeaturesTable&quot;, indent)</description><symbolName>com.spotify.scio.bigquery.types.SchemaUtil.toPrettyString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobBase</class><classType>Class</classType><fullClassName>com.spotify.tf.UserAggregatesJobBase</fullClassName><method>main</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>197</id><start>1375</start><end>1375</end><line>38</line><description>qual$1.saveAsTypedBigQuery$default$4</description><symbolName>com.spotify.scio.bigquery.BigQuerySCollection.saveAsTypedBigQuery$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</source><package>com.spotify.tf</package><class>InAppLabelTable</class><classType>Object</classType><fullClassName>com.spotify.tf.InAppLabelTables.InAppLabelTable</fullClassName><method>toPrettyString</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/tables/InAppLabelTables.scala</path><id>233</id><start>2268</start><end>2268</end><line>64</line><description>this.schema</description><symbolName>com.spotify.tf.InAppLabelTables.InAppLabelTable.schema</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</source><package>com.spotify.tf</package><class>UserAggregatesJobPredict</class><classType>Object</classType><fullClassName>com.spotify.tf.UserAggregatesJobPredict</fullClassName><method>getBQOutputPath</method><path>/Users/lingh/Git/ML/messaging-optimization/messaging-optimization-pipeline/tf-supervised/src/main/scala/com/spotify/tf/jobs/UserAggregatesJob.scala</path><id>206</id><start>2015</start><end>2016</end><line>54</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>